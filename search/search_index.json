{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rocket MV Basic for VS Code Rocket MV BASIC for VS Code is a free Visual Studio Code extension created by Rocket Software. This extension enables BASIC developers to modernize their MultiValue applications in one of the most popular development platforms with an exceptional editing experience. Features This extension allows: BASIC statements / keywords highlighting Semantic highlighting Symbols collection / outline on the current document Code folding Go to / Peek definition on the current document or crossing different files Rename symbols for the same type Find symbol references in current document and crossing different files Hover over a statement to display its documentation Document formatting, range formatting and on typing formatting Detail settings for formatting Auto-Completion for BASIC statements, keywords, and symbols Connect to U2 MultiValue server and cache cataloged programs to local machine when necessary Auto-Group files and customize the group rules Add customized documentation for functions, subroutines, or labels Show syntax and grammar errors Prompt parameters of BASIC internal functions Compile / Catalog BASIC programs on the U2 server Debug BASIC program files Remote editing of BASIC program files on a U2 server (preview) Getting started Requirements: VS Code version 1.75 or higher. JDK or OpenJDK version 11 or higher. Install & configure the extension Install this extension from the VS Code Marketplace. Step 1 : Open Visual Studio Code . Step 2 : Click the Extensions icon ( CTRL + SHIFT + X ). This opens the EXTENSIONS panel. Step 3 : Search for Rocket MV Basic . Step 4 : Click Install and wait for the installation to complete. Download, install and setup the Java environment. Note that you can skip Step 1 and Step 2 if you already have Java 11+ (OpenJDK or Oracle JDK) installed. Step 1 : Click Manage > Extension settings . This opens the Extension Settings window. Step 2 : In the JDK Environment section enter the full path to the JDK bin folder. For example., C:\\jdk-20\\bin . Step 3 . Open User Settings (use the appropriate option listed below): On Windows/Linux File > Preferences > Settings Use the keyboard shortcut Ctrl + , to open the setting editor Press F1 or Ctrl + Shift + P to open the Command Palette, and then select Preferences: Open Settings (UI) On macOS Code > Preferences > Settings Press F1 or Ctrl + Shift + P on Mac to open Command Palette, and then select Preferences: Open Settings (UI) Step 4 . Search \u201cRocket\u201d to locate the Rocket MV BASIC extension and enter the Java bin path as illustrated in the example below. Note : Using this method, an existing working environment that requires a different version of Java would not be impacted and the extension will work properly in the Java 11 (or above) environment. Open an account folder as a workspace Select \"File\" > \"Open Folder\" to open a folder that contains the BASIC program files you want to view or edit. You can also add multiple folders to the workspace using \"File\" > \"Add Folder to Workspace\". We recommend that you open the U2 account level folders to avoid encountering exceptions. Note : This extension is designed to work with folders/directories rather than individual program files. If you open a single file, some functions may be limited. Activate the extension. By default, the extension is automatically activated when opening a file with the suffix \".B\". If your BASIC program files don\u2019t end with a \".B\" suffix, please refer to the FAQ to see how to customize the rules for activating the extension automatically. If the extension is not activated automatically, please open the Command Palette in VS code(use any option listed below), and enter the \"Activate Rocket MV BASIC\" command to activate it manually. On Windows/Linux View > Command Palette Press F1 or Ctrl + Shift + P On macOS View > Command Palette Press F1 or Ctrl + Shift + P Note : Currently, the extension does not provide version control capabilities. Users should manage source code versions independent of this extension. Usage Click the links below to learn more about using each feature. You can also refer to the user manual documentation online . Editing Features Auto completion Code folding Code lens Document symbols Diagnostics Find references Formatting Go to definition Hover Rename Semantic highlighting Signature help Online Editing Development Environment Auto group view Compile BASIC programs Configurations Connect to U2 server Customized documentation Others Compile BASIC programs Multiple Workspace Folders Debugging Contact Us Please visit our forum for more information.","title":"Home"},{"location":"#rocket-mv-basic-for-vs-code","text":"Rocket MV BASIC for VS Code is a free Visual Studio Code extension created by Rocket Software. This extension enables BASIC developers to modernize their MultiValue applications in one of the most popular development platforms with an exceptional editing experience.","title":"Rocket MV Basic for VS Code"},{"location":"#features","text":"This extension allows: BASIC statements / keywords highlighting Semantic highlighting Symbols collection / outline on the current document Code folding Go to / Peek definition on the current document or crossing different files Rename symbols for the same type Find symbol references in current document and crossing different files Hover over a statement to display its documentation Document formatting, range formatting and on typing formatting Detail settings for formatting Auto-Completion for BASIC statements, keywords, and symbols Connect to U2 MultiValue server and cache cataloged programs to local machine when necessary Auto-Group files and customize the group rules Add customized documentation for functions, subroutines, or labels Show syntax and grammar errors Prompt parameters of BASIC internal functions Compile / Catalog BASIC programs on the U2 server Debug BASIC program files Remote editing of BASIC program files on a U2 server (preview)","title":"Features"},{"location":"#getting-started","text":"Requirements: VS Code version 1.75 or higher. JDK or OpenJDK version 11 or higher.","title":"Getting started"},{"location":"#install-configure-the-extension","text":"Install this extension from the VS Code Marketplace. Step 1 : Open Visual Studio Code . Step 2 : Click the Extensions icon ( CTRL + SHIFT + X ). This opens the EXTENSIONS panel. Step 3 : Search for Rocket MV Basic . Step 4 : Click Install and wait for the installation to complete. Download, install and setup the Java environment. Note that you can skip Step 1 and Step 2 if you already have Java 11+ (OpenJDK or Oracle JDK) installed. Step 1 : Click Manage > Extension settings . This opens the Extension Settings window. Step 2 : In the JDK Environment section enter the full path to the JDK bin folder. For example., C:\\jdk-20\\bin . Step 3 . Open User Settings (use the appropriate option listed below): On Windows/Linux File > Preferences > Settings Use the keyboard shortcut Ctrl + , to open the setting editor Press F1 or Ctrl + Shift + P to open the Command Palette, and then select Preferences: Open Settings (UI) On macOS Code > Preferences > Settings Press F1 or Ctrl + Shift + P on Mac to open Command Palette, and then select Preferences: Open Settings (UI) Step 4 . Search \u201cRocket\u201d to locate the Rocket MV BASIC extension and enter the Java bin path as illustrated in the example below. Note : Using this method, an existing working environment that requires a different version of Java would not be impacted and the extension will work properly in the Java 11 (or above) environment.","title":"Install &amp; configure the extension"},{"location":"#open-an-account-folder-as-a-workspace","text":"Select \"File\" > \"Open Folder\" to open a folder that contains the BASIC program files you want to view or edit. You can also add multiple folders to the workspace using \"File\" > \"Add Folder to Workspace\". We recommend that you open the U2 account level folders to avoid encountering exceptions. Note : This extension is designed to work with folders/directories rather than individual program files. If you open a single file, some functions may be limited. Activate the extension. By default, the extension is automatically activated when opening a file with the suffix \".B\". If your BASIC program files don\u2019t end with a \".B\" suffix, please refer to the FAQ to see how to customize the rules for activating the extension automatically. If the extension is not activated automatically, please open the Command Palette in VS code(use any option listed below), and enter the \"Activate Rocket MV BASIC\" command to activate it manually. On Windows/Linux View > Command Palette Press F1 or Ctrl + Shift + P On macOS View > Command Palette Press F1 or Ctrl + Shift + P Note : Currently, the extension does not provide version control capabilities. Users should manage source code versions independent of this extension.","title":"Open an account folder as a workspace"},{"location":"#usage","text":"Click the links below to learn more about using each feature. You can also refer to the user manual documentation online . Editing Features Auto completion Code folding Code lens Document symbols Diagnostics Find references Formatting Go to definition Hover Rename Semantic highlighting Signature help Online Editing Development Environment Auto group view Compile BASIC programs Configurations Connect to U2 server Customized documentation Others Compile BASIC programs Multiple Workspace Folders Debugging","title":"Usage"},{"location":"#contact-us","text":"Please visit our forum for more information.","title":"Contact Us"},{"location":"usage/Accounts/","text":"Accounts Settings You can add additional account folders in the configuration file. Doing this allows other features to reference the source code in these account folders. Note : the account folders must be on your local machine. Please refer to Configuration to open the database related configuration file. \"accounts\": [ { \"name\": \"accountName\", \"path\": \"accountFullPath\" } ] Find the \"accounts\" section and then add your additional accounts. name : the account name. path : the account folders full path. You can also add multiple accounts settings. \"accounts\": [ { \"name\": \"accountName_1\", \"path\": \"accountFullPath_1\" }, { \"name\": \"accountName_2\", \"path\": \"accountFullPath_2\" } ]","title":"Accounts Settings"},{"location":"usage/Accounts/#accounts-settings","text":"You can add additional account folders in the configuration file. Doing this allows other features to reference the source code in these account folders. Note : the account folders must be on your local machine. Please refer to Configuration to open the database related configuration file. \"accounts\": [ { \"name\": \"accountName\", \"path\": \"accountFullPath\" } ] Find the \"accounts\" section and then add your additional accounts. name : the account name. path : the account folders full path. You can also add multiple accounts settings. \"accounts\": [ { \"name\": \"accountName_1\", \"path\": \"accountFullPath_1\" }, { \"name\": \"accountName_2\", \"path\": \"accountFullPath_2\" } ]","title":"Accounts Settings"},{"location":"usage/CHANGELOG/","text":"Change Log Version 2.7.1: June 04, 2025 Added VS Code language auto-detection (online mode) Auto-close files on server disconnect in online mode Customer bug fixes Version 2.7.0: April 22, 2025 Separate compile and catalog option Support for debugging BASIC program files in online editing mode. (support with UV 11.4.1 and upcoming 14.2.1) Support for keyword search within U2 accounts via right-click context menu. Customer bug fixes Version 2.6.0: November 21, 2024 Enhancement: UD compilation will read parameters from basic.mvbasic.json file. Support pattern configuration for account, folder and file filtering (only in online mode). Customer bug fixes Version 2.5.1: August 23, 2024 Support for cataloging BASIC program files via right-click component in both online and offline modes. Version 2.5.0: June 26, 2024 Support compile / catalog BASIC program files in online editing mode. Support the rpc service name can be customized (only in offline mode) Customer bug fixes - some incorrect behaviors on Linux Version 2.4.0: February 26, 2024 Support high performance debugging on UniData 8.3.1 (Windows / Linux). Support new compilation flavor 'r' and 'm' for UniData. Resolve the issue that extension could not be started when JAVA_OPTIONS is configured. Version 2.3.0: October 31, 2023 Implement the ability to sort BASIC program files while in online editing mode. Provide support for configuring unique server names for online editing servers. Enhance warning messages for specific operations. Implement various optimizations for the online editing mode. Version 2.2.0: August 17, 2023 Support high performance debugging on UniVerse 11.4.1 (Windows / Linux) Version 2.1.0: May 31, 2023 Support online editing (preview) which can help user to edit BASIC program files on remote U2 servers. Version 1.10.1: March 30, 2023 Update extension's logo. Version 1.10.0: March 30, 2023 Enhancement: full path support in UniData $INCLUDE statement Enhancement: disconnect debug session when U2 server is disconnected. Enhancement: add functions / labels / subroutines to breadcrumbs. Bugs fix: 6 bugs fixed. Version 1.9.0: January 5, 2023 Enhancement: support additional parameters for compilation Enhancement: support additional parameters for debugging Version 1.8.0: October 27, 2022 Feature: support logging system. Please refer online documentation for details. Feature: monitor U2 server connection status. Enhancement: when compiling a BASIC program, the account folder name must be the same as the connected account name. Bug fix: 38 bugs fixed. Version 1.7.0: August 17, 2022 Feature: (Preview) support debugging functionalities on UniData 8.2.4. Bug fix: improve the stability of debugging. Bug fix: improve file parsing performance. Version 1.6.0: April 29, 2022 Feature: (Preview) support debug BASIC program files on UniVerse. Please refer online documentation to see known issues. Bug fix: show connection icon only when extension activated. Version 1.5.0: March 31, 2022 Feature: support multiple workspace folders. Enhancement: change some functions to support multiple workspace folders, for example, auto group view, connection to U2 server, etc. Bug fix: resolve incorrect syntax checking, for example, label name, REM function, etc. Bug fix: resolve a compilation failed issue if VS Code upgraded to latest version. Bug fix: make some messages more readable. Bug fix: support more UV and UD keywords. Bug fix: fix the issue formatting sometimes could not work. Version 1.4.0: January 28, 2022 Enhancement: show U2 server account name when connection established. Bug fix: resolve some incorrect grammar / syntax related bugs. Bug fix: resolve some incorrect / misspelling messages. Version 1.3.3: December 21, 2021 Upgrade log4j to 2.17.0 to avoid security issue. Version 1.3.2: December 17, 2021 Upgrade log4j to 2.16.0 to avoid security issue. Version 1.3.1: December 11, 2021 Upgrade log4j to latest version to prevent remote injection attack. Version 1.3.0: December 10, 2021 Show U2 server connection status icon in status bar. Enhancement: more readable connection and compilation feedback messages. Bug fix: code folding error in loop statement. Bug fix: add missed functions and statements, for example: COM, TTYSET, XDOMGetElementById, etc. Bug fix: CALL @VARIABLE shows undefined function error. Bug fix: exclude objective code from compilation tasks in UniData; Bug fix: show overwriting message when modifying configuration files. Bug fix: update incorrect comments in configuration files. Bug fix: BASIC parser crashes when meets double special characters at head of a line. Version 1.2.0: September 30, 2021 Support compile and catalog BASIC program files on U2 server; Add comments in configuration files for new created project; Select \"UniVerse\" or \"UniData\" when open the project first time, rather than set \"UniVerse\" as default; Optimize activation process: the extension now could be activated automatically when \".rmv\" folder exists; Add commands to enable / disable code lens in current project, by default code lens is disabled; Bug fix: highlight U2 internal @ variables and don't show error for them; Bug fix: display one file multiple times in group view; Bug fix: improve performance when project is too big; Bug fix: unrecognized grammar for \"LOOP WHILE READNEXT\"; Bug fix: provide hover documents for MQ related functions; Bug fix: support function HMAC. Version 1.1.2: July 31, 2021 Add new feature: Code Lens Bug fix: @ variables are recognized as undefined symbol Bug fix: catalog checking causes high CPU usage Bug fix: go to definition doesn't work correctly when cursor at the beginning of a symbol Bug fix: open single file in VS Code causes crash Version 1.1.1: May 27, 2021 Add new feature: Signature Help Add new feature: Diagnostic Version 1.1.0: March 31, 2021 Initial release","title":"Change Log"},{"location":"usage/CHANGELOG/#change-log","text":"","title":"Change Log"},{"location":"usage/CHANGELOG/#version-271-june-04-2025","text":"Added VS Code language auto-detection (online mode) Auto-close files on server disconnect in online mode Customer bug fixes","title":"Version 2.7.1: June 04, 2025"},{"location":"usage/CHANGELOG/#version-270-april-22-2025","text":"Separate compile and catalog option Support for debugging BASIC program files in online editing mode. (support with UV 11.4.1 and upcoming 14.2.1) Support for keyword search within U2 accounts via right-click context menu. Customer bug fixes","title":"Version 2.7.0: April 22, 2025"},{"location":"usage/CHANGELOG/#version-260-november-21-2024","text":"Enhancement: UD compilation will read parameters from basic.mvbasic.json file. Support pattern configuration for account, folder and file filtering (only in online mode). Customer bug fixes","title":"Version 2.6.0: November 21, 2024"},{"location":"usage/CHANGELOG/#version-251-august-23-2024","text":"Support for cataloging BASIC program files via right-click component in both online and offline modes.","title":"Version 2.5.1: August 23, 2024"},{"location":"usage/CHANGELOG/#version-250-june-26-2024","text":"Support compile / catalog BASIC program files in online editing mode. Support the rpc service name can be customized (only in offline mode) Customer bug fixes - some incorrect behaviors on Linux","title":"Version 2.5.0: June 26, 2024"},{"location":"usage/CHANGELOG/#version-240-february-26-2024","text":"Support high performance debugging on UniData 8.3.1 (Windows / Linux). Support new compilation flavor 'r' and 'm' for UniData. Resolve the issue that extension could not be started when JAVA_OPTIONS is configured.","title":"Version 2.4.0: February 26, 2024"},{"location":"usage/CHANGELOG/#version-230-october-31-2023","text":"Implement the ability to sort BASIC program files while in online editing mode. Provide support for configuring unique server names for online editing servers. Enhance warning messages for specific operations. Implement various optimizations for the online editing mode.","title":"Version 2.3.0: October 31, 2023"},{"location":"usage/CHANGELOG/#version-220-august-17-2023","text":"Support high performance debugging on UniVerse 11.4.1 (Windows / Linux)","title":"Version 2.2.0: August 17, 2023"},{"location":"usage/CHANGELOG/#version-210-may-31-2023","text":"Support online editing (preview) which can help user to edit BASIC program files on remote U2 servers.","title":"Version 2.1.0: May 31, 2023"},{"location":"usage/CHANGELOG/#version-1101-march-30-2023","text":"Update extension's logo.","title":"Version 1.10.1: March 30, 2023"},{"location":"usage/CHANGELOG/#version-1100-march-30-2023","text":"Enhancement: full path support in UniData $INCLUDE statement Enhancement: disconnect debug session when U2 server is disconnected. Enhancement: add functions / labels / subroutines to breadcrumbs. Bugs fix: 6 bugs fixed.","title":"Version 1.10.0: March 30, 2023"},{"location":"usage/CHANGELOG/#version-190-january-5-2023","text":"Enhancement: support additional parameters for compilation Enhancement: support additional parameters for debugging","title":"Version 1.9.0: January 5, 2023"},{"location":"usage/CHANGELOG/#version-180-october-27-2022","text":"Feature: support logging system. Please refer online documentation for details. Feature: monitor U2 server connection status. Enhancement: when compiling a BASIC program, the account folder name must be the same as the connected account name. Bug fix: 38 bugs fixed.","title":"Version 1.8.0: October 27, 2022"},{"location":"usage/CHANGELOG/#version-170-august-17-2022","text":"Feature: (Preview) support debugging functionalities on UniData 8.2.4. Bug fix: improve the stability of debugging. Bug fix: improve file parsing performance.","title":"Version 1.7.0: August 17, 2022"},{"location":"usage/CHANGELOG/#version-160-april-29-2022","text":"Feature: (Preview) support debug BASIC program files on UniVerse. Please refer online documentation to see known issues. Bug fix: show connection icon only when extension activated.","title":"Version 1.6.0: April 29, 2022"},{"location":"usage/CHANGELOG/#version-150-march-31-2022","text":"Feature: support multiple workspace folders. Enhancement: change some functions to support multiple workspace folders, for example, auto group view, connection to U2 server, etc. Bug fix: resolve incorrect syntax checking, for example, label name, REM function, etc. Bug fix: resolve a compilation failed issue if VS Code upgraded to latest version. Bug fix: make some messages more readable. Bug fix: support more UV and UD keywords. Bug fix: fix the issue formatting sometimes could not work.","title":"Version 1.5.0: March 31, 2022"},{"location":"usage/CHANGELOG/#version-140-january-28-2022","text":"Enhancement: show U2 server account name when connection established. Bug fix: resolve some incorrect grammar / syntax related bugs. Bug fix: resolve some incorrect / misspelling messages.","title":"Version 1.4.0: January 28, 2022"},{"location":"usage/CHANGELOG/#version-133-december-21-2021","text":"Upgrade log4j to 2.17.0 to avoid security issue.","title":"Version 1.3.3: December 21, 2021"},{"location":"usage/CHANGELOG/#version-132-december-17-2021","text":"Upgrade log4j to 2.16.0 to avoid security issue.","title":"Version 1.3.2: December 17, 2021"},{"location":"usage/CHANGELOG/#version-131-december-11-2021","text":"Upgrade log4j to latest version to prevent remote injection attack.","title":"Version 1.3.1: December 11, 2021"},{"location":"usage/CHANGELOG/#version-130-december-10-2021","text":"Show U2 server connection status icon in status bar. Enhancement: more readable connection and compilation feedback messages. Bug fix: code folding error in loop statement. Bug fix: add missed functions and statements, for example: COM, TTYSET, XDOMGetElementById, etc. Bug fix: CALL @VARIABLE shows undefined function error. Bug fix: exclude objective code from compilation tasks in UniData; Bug fix: show overwriting message when modifying configuration files. Bug fix: update incorrect comments in configuration files. Bug fix: BASIC parser crashes when meets double special characters at head of a line.","title":"Version 1.3.0: December 10, 2021"},{"location":"usage/CHANGELOG/#version-120-september-30-2021","text":"Support compile and catalog BASIC program files on U2 server; Add comments in configuration files for new created project; Select \"UniVerse\" or \"UniData\" when open the project first time, rather than set \"UniVerse\" as default; Optimize activation process: the extension now could be activated automatically when \".rmv\" folder exists; Add commands to enable / disable code lens in current project, by default code lens is disabled; Bug fix: highlight U2 internal @ variables and don't show error for them; Bug fix: display one file multiple times in group view; Bug fix: improve performance when project is too big; Bug fix: unrecognized grammar for \"LOOP WHILE READNEXT\"; Bug fix: provide hover documents for MQ related functions; Bug fix: support function HMAC.","title":"Version 1.2.0: September 30, 2021"},{"location":"usage/CHANGELOG/#version-112-july-31-2021","text":"Add new feature: Code Lens Bug fix: @ variables are recognized as undefined symbol Bug fix: catalog checking causes high CPU usage Bug fix: go to definition doesn't work correctly when cursor at the beginning of a symbol Bug fix: open single file in VS Code causes crash","title":"Version 1.1.2: July 31, 2021"},{"location":"usage/CHANGELOG/#version-111-may-27-2021","text":"Add new feature: Signature Help Add new feature: Diagnostic","title":"Version 1.1.1: May 27, 2021"},{"location":"usage/CHANGELOG/#version-110-march-31-2021","text":"Initial release","title":"Version 1.1.0: March 31, 2021"},{"location":"usage/Catalog/","text":"Catalog Settings in \"db.mvbasic.json\" file Please refer to Configuration to open the database related configuration file and then find the \"catalog\" section. \"catalog\": { \"readServerInternal\": 5, \"isSearchAllDirs\": false, \"programDirs\": [ { \"fileName\": \"\" }, { \"account\": \"\", \"fileName\": \"\" } ], \"programMapping\": [ { \"catalogName\": \"\", \"program\": \"\" }, { \"catalogName\": \"\", \"fileName\": \"\", \"program\": \"\" }, { \"catalogName\": \"\", \"account\": \"\", \"fileName\": \"\", \"program\": \"\" } ] } readServerInternal : the extension requests catalog related information from server per X seconds when connected to a U2 server. X is the value you set to this setting. By default X is 5 seconds. isSearchAllDirs : specifies whether to search all sub-folders to find catalog programs in the current account folder. By default, the value is false, and only the folder containing the file current being edited is searched. If set to true, all sub-folders will be searched. programDirs : sets the account and folder in which to search for catalog files. You can add multiple items in this setting. fileName : file folder name. account : account folder name. programMapping : catalogName : catalog program name; sometimes this is different from the source code file name. program : catalog program file name, which is the source code file name. account : specifies the account that contains the catalog program file. You can configure multiple account folders in the configuration file. Please refer to Accounts Settings for more details. fileName : file folder name. Examples Example 1 . Search for catalog programs in another source code folder in the current account folder. For example, add a folder named \"OtherFolder\" to search for catalog programs in current account folder: \"programDirs\": [ { \"fileName\": \"OtherFolder\" } ] Example 2 . Search for catalog programs in another account\u2019s folders. For example, add the folder \"OtherFolder\" (from the \u201cDEMO\u201d account) to search for catalog program files: \"programDirs\": [ { \"account\": \"DEMO\", \"fileName\": \"OtherFolder\" } ] Example 3 . Create a mapping relationship between the names of catalog programs and their source files. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\", the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"program\": \"SourceCode\" } ] Example 4 . Create a mapping relationship between the names of catalog programs and their source files, where the source code is in another account folder. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\" (which exists in the \u201cBP\u201d file folder of the \"DEMO\" account ), the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"file\": \"BP\", \"program\": \"SourceCode\" } ] Example 5 . Create a mapping relationship between the names of catalog programs and their source files, where the source code file is in another file folder of the current account. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\" (which exists in the \u201cBP\u201dfolder), the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"account\": \"DEMO\" \"file\": \"BP\", \"program\": \"SourceCode\" } ] Quick Catalog Users can right-click a BASIC program file and select \"Catalog\" to catalog a single file for both Universe and Unidata databases Catalog Settings in \"basic.mvbasic.json\" file Cataloging a program makes it available to all users or to users of one account. You must catalog a program before another BASIC program can call it as an external subroutine. { \"catalog\": \"\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Cataloging in Universe Local Catalog : Local cataloging creates a VOC entry for the program. This entry is a verb that points to the file and record containing the object code for the cataloged program. You can access a locally cataloged program only from the account in which it was cataloged, unless you copy the VOC entry for the catalog name to another account. Because cataloging a program locally only creates a VOC entry pointing to the object file, you need not recatalog the program every time you recompile it { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Normal Catalog : Normal cataloging copies the specified object record to the system catalog space, making it available to all users. The name of the program in the catalog is in the following format: account catalog.name account is the name of the current account directory. Normal cataloging also creates a VOC entry for the catalog name. This entry is a verb that contains the name account catalog.name in field 2. Because normal cataloging copies the object code to the system catalog space, you must recatalog the program every time you recompile it. To catalog a program normally, specify a catalog.name that does not begin with the characters *, -, $, or !, and do not specify the keyword LOCAL. { \"catalog\": \"normal\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Global Catalog : Like normal cataloging, global cataloging copies the specified object record to the system catalog space, making it available to all users. The name of the program in the catalog is in the following format: catalog.name -catalog.name $catalog.name !catalog.name Global cataloging does not create a VOC entry for the catalog name. The UniVerse command processor and the run machine look in the system catalog space for verbs or external subroutines with names that have an initial , - , $, or ! character. Because globally cataloged subroutines are accessed without a VOC entry, they are available to all accounts on the system as soon as they are cataloged. Because global cataloging copies the object code to the system catalog space, you must recatalog the program every time you recompile it. To catalog a program globally, specify a catalog.name beginning with *, -, $, or !, and do not specify the keyword LOCAL. { \"catalog\": \"global\", \"arguments\": \"\", \"initialCharacter\": \"*\", \"ud_compile_flavor\": \"\" } Cataloging in Unidata Direct Catalog : Catalogs the program locally without copying it to the local or system CTLG directory. Instead, UniData creates an entry in the VOC file that is a pointer to the directory where the program resides. { \"catalog\": \"direct\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Local Catalog : Catalogs the program locally and places a copy of it in a subdirectory of the local CTLG catalog (in the account where the user is running the program). UniData creates a VOC pointer to the subdirectory.UniData creates the CTLG and the subdirectory, if they do not already exist. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Note 1 : The parameter \"arguments\" in the basic.mvbasic.json file is currently not supported by the catalog feature. By default, the argument is set to FORCE for both the UV and UD databases. Note 2 : If the ./rmv configuration exists, the basic.mvbasic.json file will be created during the first catalog attempt. If the ./rmv configuration does not exist, the config/basic.mvbasic.json file will be created when the extension is activated.","title":"Catalog Settings"},{"location":"usage/Catalog/#catalog-settings-in-dbmvbasicjson-file","text":"Please refer to Configuration to open the database related configuration file and then find the \"catalog\" section. \"catalog\": { \"readServerInternal\": 5, \"isSearchAllDirs\": false, \"programDirs\": [ { \"fileName\": \"\" }, { \"account\": \"\", \"fileName\": \"\" } ], \"programMapping\": [ { \"catalogName\": \"\", \"program\": \"\" }, { \"catalogName\": \"\", \"fileName\": \"\", \"program\": \"\" }, { \"catalogName\": \"\", \"account\": \"\", \"fileName\": \"\", \"program\": \"\" } ] } readServerInternal : the extension requests catalog related information from server per X seconds when connected to a U2 server. X is the value you set to this setting. By default X is 5 seconds. isSearchAllDirs : specifies whether to search all sub-folders to find catalog programs in the current account folder. By default, the value is false, and only the folder containing the file current being edited is searched. If set to true, all sub-folders will be searched. programDirs : sets the account and folder in which to search for catalog files. You can add multiple items in this setting. fileName : file folder name. account : account folder name. programMapping : catalogName : catalog program name; sometimes this is different from the source code file name. program : catalog program file name, which is the source code file name. account : specifies the account that contains the catalog program file. You can configure multiple account folders in the configuration file. Please refer to Accounts Settings for more details. fileName : file folder name.","title":"Catalog Settings in \"db.mvbasic.json\" file"},{"location":"usage/Catalog/#examples","text":"Example 1 . Search for catalog programs in another source code folder in the current account folder. For example, add a folder named \"OtherFolder\" to search for catalog programs in current account folder: \"programDirs\": [ { \"fileName\": \"OtherFolder\" } ] Example 2 . Search for catalog programs in another account\u2019s folders. For example, add the folder \"OtherFolder\" (from the \u201cDEMO\u201d account) to search for catalog program files: \"programDirs\": [ { \"account\": \"DEMO\", \"fileName\": \"OtherFolder\" } ] Example 3 . Create a mapping relationship between the names of catalog programs and their source files. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\", the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"program\": \"SourceCode\" } ] Example 4 . Create a mapping relationship between the names of catalog programs and their source files, where the source code is in another account folder. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\" (which exists in the \u201cBP\u201d file folder of the \"DEMO\" account ), the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"file\": \"BP\", \"program\": \"SourceCode\" } ] Example 5 . Create a mapping relationship between the names of catalog programs and their source files, where the source code file is in another file folder of the current account. For example, to map the catalog program named \"CtlgProgram\" to the source code file named \"SourceCode\" (which exists in the \u201cBP\u201dfolder), the settings should be: \"programMapping\": [ { \"catalogName\": \"CtlgProgram\", \"account\": \"DEMO\" \"file\": \"BP\", \"program\": \"SourceCode\" } ]","title":"Examples"},{"location":"usage/Catalog/#quick-catalog","text":"Users can right-click a BASIC program file and select \"Catalog\" to catalog a single file for both Universe and Unidata databases","title":"Quick Catalog"},{"location":"usage/Catalog/#catalog-settings-in-basicmvbasicjson-file","text":"Cataloging a program makes it available to all users or to users of one account. You must catalog a program before another BASIC program can call it as an external subroutine. { \"catalog\": \"\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" }","title":"Catalog Settings in \"basic.mvbasic.json\" file"},{"location":"usage/Catalog/#cataloging-in-universe","text":"Local Catalog : Local cataloging creates a VOC entry for the program. This entry is a verb that points to the file and record containing the object code for the cataloged program. You can access a locally cataloged program only from the account in which it was cataloged, unless you copy the VOC entry for the catalog name to another account. Because cataloging a program locally only creates a VOC entry pointing to the object file, you need not recatalog the program every time you recompile it { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Normal Catalog : Normal cataloging copies the specified object record to the system catalog space, making it available to all users. The name of the program in the catalog is in the following format: account catalog.name account is the name of the current account directory. Normal cataloging also creates a VOC entry for the catalog name. This entry is a verb that contains the name account catalog.name in field 2. Because normal cataloging copies the object code to the system catalog space, you must recatalog the program every time you recompile it. To catalog a program normally, specify a catalog.name that does not begin with the characters *, -, $, or !, and do not specify the keyword LOCAL. { \"catalog\": \"normal\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Global Catalog : Like normal cataloging, global cataloging copies the specified object record to the system catalog space, making it available to all users. The name of the program in the catalog is in the following format: catalog.name -catalog.name $catalog.name !catalog.name Global cataloging does not create a VOC entry for the catalog name. The UniVerse command processor and the run machine look in the system catalog space for verbs or external subroutines with names that have an initial , - , $, or ! character. Because globally cataloged subroutines are accessed without a VOC entry, they are available to all accounts on the system as soon as they are cataloged. Because global cataloging copies the object code to the system catalog space, you must recatalog the program every time you recompile it. To catalog a program globally, specify a catalog.name beginning with *, -, $, or !, and do not specify the keyword LOCAL. { \"catalog\": \"global\", \"arguments\": \"\", \"initialCharacter\": \"*\", \"ud_compile_flavor\": \"\" }","title":"Cataloging in Universe"},{"location":"usage/Catalog/#cataloging-in-unidata","text":"Direct Catalog : Catalogs the program locally without copying it to the local or system CTLG directory. Instead, UniData creates an entry in the VOC file that is a pointer to the directory where the program resides. { \"catalog\": \"direct\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Local Catalog : Catalogs the program locally and places a copy of it in a subdirectory of the local CTLG catalog (in the account where the user is running the program). UniData creates a VOC pointer to the subdirectory.UniData creates the CTLG and the subdirectory, if they do not already exist. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"\" } Note 1 : The parameter \"arguments\" in the basic.mvbasic.json file is currently not supported by the catalog feature. By default, the argument is set to FORCE for both the UV and UD databases. Note 2 : If the ./rmv configuration exists, the basic.mvbasic.json file will be created during the first catalog attempt. If the ./rmv configuration does not exist, the config/basic.mvbasic.json file will be created when the extension is activated.","title":"Cataloging in Unidata"},{"location":"usage/CodeLens/","text":"Code Lens Code lens allows you to review your code and find references to variables, functions or subroutines without leaving the editor. To list these references, click the hyperlink as illustrated below. The hyperlink is highlighted when you hover your cursor over the text. Since 1.2.0 release, this feature is disabled by default. You can enable / disable it through commands: Enable code lens Disable code lens","title":"Code Lens"},{"location":"usage/CodeLens/#code-lens","text":"Code lens allows you to review your code and find references to variables, functions or subroutines without leaving the editor. To list these references, click the hyperlink as illustrated below. The hyperlink is highlighted when you hover your cursor over the text. Since 1.2.0 release, this feature is disabled by default. You can enable / disable it through commands: Enable code lens Disable code lens","title":"Code Lens"},{"location":"usage/Compatibility/","text":"U2 Product Compatibility For the Rocket MV BASIC Extension product, not all features are currently supported on all U2 products & platforms. Users need to pay attention to the U2 product version and platform information first, as some feature may not working properly. For more details, please refer Rocket-MV-BASIC-Extension-features-support-matrix . VS Code Compatibility Upgrading VS Code may potentially introduce some issues that could result in anomalies with the compilation or debugging functions of our extension. In such cases, you can consider downgrading VS Code as a workaround. We have summarized a list of recent stable versions of VS Code for your reference. VS Code GRPC Debug CLI Debug Compilation Online Editing 1.83.1 x x \u221a \u221a 1.82.3 x x \u221a \u221a 1.82.2 \u221a \u221a \u221a \u221a 1.82.1 \u221a \u221a \u221a \u221a 1.81.0 \u221a \u221a \u221a \u221a 1.80.2 \u221a \u00d7 \u221a \u221a 1.79.2 \u221a \u00d7 \u221a \u221a 1.78.2 \u221a \u221a \u221a \u221a 1.77.3 \u221a \u221a \u221a \u221a 1.76.2 \u221a \u221a \u221a \u221a 1.75.1 \u221a \u221a \u221a \u221a Due to the upgrades to VS Code versions 1.82.3 and 1.83.1, the restart functionality in the debugging feature cannot be used properly, but other debugging functions work without issues. Note : Please refer Debugging to find out suitable UniVerse / UniData for debugging features.","title":"Compatibility"},{"location":"usage/Compatibility/#u2-product-compatibility","text":"For the Rocket MV BASIC Extension product, not all features are currently supported on all U2 products & platforms. Users need to pay attention to the U2 product version and platform information first, as some feature may not working properly. For more details, please refer Rocket-MV-BASIC-Extension-features-support-matrix .","title":"U2 Product Compatibility"},{"location":"usage/Compatibility/#vs-code-compatibility","text":"Upgrading VS Code may potentially introduce some issues that could result in anomalies with the compilation or debugging functions of our extension. In such cases, you can consider downgrading VS Code as a workaround. We have summarized a list of recent stable versions of VS Code for your reference. VS Code GRPC Debug CLI Debug Compilation Online Editing 1.83.1 x x \u221a \u221a 1.82.3 x x \u221a \u221a 1.82.2 \u221a \u221a \u221a \u221a 1.82.1 \u221a \u221a \u221a \u221a 1.81.0 \u221a \u221a \u221a \u221a 1.80.2 \u221a \u00d7 \u221a \u221a 1.79.2 \u221a \u00d7 \u221a \u221a 1.78.2 \u221a \u221a \u221a \u221a 1.77.3 \u221a \u221a \u221a \u221a 1.76.2 \u221a \u221a \u221a \u221a 1.75.1 \u221a \u221a \u221a \u221a Due to the upgrades to VS Code versions 1.82.3 and 1.83.1, the restart functionality in the debugging feature cannot be used properly, but other debugging functions work without issues. Note : Please refer Debugging to find out suitable UniVerse / UniData for debugging features.","title":"VS Code Compatibility"},{"location":"usage/Compile/","text":"Compiling BASIC Program Files Users can compile and catalog BASIC programs using this extension. Note : Before compiling BASIC programs, a U2 server must be connected. For information on connecting to a U2 server, please see this section . After compiling, regardless of whether the compile succeeds or fails, the BASIC files will be synchronized to the U2 server, overwriting the existing ones and new files will also be created. Generated objective files will not be synchronized from the server to the local machine. Compilation does not work properly when VS Code and the extension installed on Linux platform. Compile and catalog There are 3 methods for compiling BASIC program files: From editor context Right-click in the file you want to compile then select \"Compile BASIC programs\". If there are no other modified files in your project, the compile process will be started immediately. If other modified files exist, a list of modified files will display. Select files you want to compile, and then click \"OK\". The compilation result will display in the VS Code terminal. Note : Using this method, compiled programs will not be cataloged. For UniData, different flavors are supported. Right-click in the file you want to compile then select \"Compile BASIC programs\". It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. From a file explorer Select one or more files, then right click the file(s) and select \"Compile selected BASIC programs\". The compilation result will display in the VS Code terminal. Note : Using this method, compiled programs will not be cataloged. Through VS Code task By using VS Code task, users can compile or catalog multiple BASIC programs at the same time. Create a BASIC build task Select \"Configure Default Build Task ...\" or \"Configure Tasks ...\" from the \"Terminal\" menu to open the Command Palette. Select \"BASIC: build\" to create a BASIC build task. A default build task configuration will be created and displayed in the editor. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [], \"compile\": { \"dataSource\": \"UNIVERSE\", \"arguments\": \"\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } If the project already has a build task, please see Example 4 (UniVerse) or Example 3 (UniData) for instructions on how to add a new build task. Task properties You can find task properties in the VS Code official documents . There are also some BASIC compilation specified properties: type : must be set to \"BASIC\". This is used to identify that the current task is a BASIC build task. targets : a list that contains the files you want to compile. The value should be the file's relative path. Please see the examples section for more details. compile : compilation related settings. It contains following configurable items. dataSource : Must be \"UNIVERSE\" or \"UNIDATA\", depending on the connected U2 server. language : (For UniData only) The programming language flavor. Must be \"UniBasic\" or \"Pick\". If not set, \"UniBasic\" is the default, but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. catalog : For UniVerse, you can select \"global\", \"local\" or \"normal\". For UniData, you can select \"global\", \"local\" or \"direct\". If not set, files will not be cataloged. initialCharacter : (For UniVerse only) The initial character of the cataloged program can only be set when the catalog parameter is set to \u201cglobal\u201d. arguments : Put additional compilation arguments here. For more details, please refer UniVerse / UniData user manual for more details. By default, this setting doesn\u2019t appear in the configuration file. Please add it manually if needed. Run build task Select \"Run build task\" from the \"Terminal\" menu to start the build task. Note 1 : Ensure that a U2 server has been connected. Otherwise, an error will occur. Note 2 : Once you click on \"Run build task,\" it will compile BASIC using the compile flavor value set to ud_compile_flavor in the basic.mvbasic.json file, instead of compiling with the \"language\" value specified in the task (for Unidata). UniVerse Compile Task Examples Example 1 . Compile a single BASIC program without cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIVERSE\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add the source code relative path to \"targets\". In this example, SAMPLE_FILE is in the BP folder. \"dataSource\" must be \"UNIVERSE\" for UniVerse. Don't set \"catalog\" and \"initialCharacter\" if you don't catalog programs. Example 2 . Compile multiple BASIC program files and perform global cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"global\", \"initialCharacter\": \"Asterisk mark (*)\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } You can add multiple source code relative paths to \"targets\" Set \"catalog\" to \"global\" if you want to perform global cataloging If the \"catalog\" type is global, you need set \"initialCharacter\", or the default value \"Asterisk mark (*)\" will be used Example 3 . Compile multiple BASIC program files and perform local cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"local\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Set \"catalog\" to \"local\"(no need to set \"initialCharacter\") Example 4 . Multiple build tasks. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\" ], \"compile\": { \"dataSource\":\"UNIVERSE\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 1\", \"group\": { \"kind\": \"build\", \"isDefault\": true } }, { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"global\", \"initialCharacter\": \"Asterisk mark (*)\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 2\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add another task object in \"tasks\" Change the \"label\" in the tasks. When you run build tasks, you can select one of these tasks UniData Compile Task Examples Example 1 . Compile a single BASIC program without cataloging, language flavor is UniBasic. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add source code relative path to \"targets\". In this example, SAMPLE_FILE is in the BP folder \"dataSource\" must be \"UNIDATA\" for UniData No need to set \"catalog\" if you don't want to catalog programs You can select the language flavor in \"language\". In this example, the language flavor is \"UniBasic\", but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. Example 2 . Compile multiple BASIC program files and perform global cataloging, language flavor is Pick. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"Pick\", \"catalog\": \"global\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } You can add multiple source code relative paths to \"targets\" Set \"language\" to \"Pick\" flavor, but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. Set \"catalog\" to \"global\" if you want to perform global cataloging Example 3 . Multiple tasks { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\" ], \"compile\": { \"dataSource\":\"UNIDATA\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 1\", \"group\": { \"kind\": \"build\", \"isDefault\": true } }, { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" \"catalog\": \"global\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 2\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add another task object in \"tasks\" Change \"label\" in the tasks, When run build tasks, you can select one of these tasks Example 4 . Additional compilation arguments { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"arguments\": \"-L -X\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Compile the BASIC program with arguments \"-L\" and \"-X\". Unidata Compile Flavor in basic.mvbasic.json File By Uusing the VS Code task, users can compile or catalog multiple BASIC programs at the same time. BASIC compilation will use the specified Task propetiesproperties (except the \"language\" property). { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\" { \"catalog\": \"direct\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"Pick\" } Example 1 . Compile a single BASIC program with flavor UniBasic. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"UniBasic\" } Example 2 . Compile a single BASIC program with flavor revelation. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"revelation\" }","title":"Compile"},{"location":"usage/Compile/#compiling-basic-program-files","text":"Users can compile and catalog BASIC programs using this extension. Note : Before compiling BASIC programs, a U2 server must be connected. For information on connecting to a U2 server, please see this section . After compiling, regardless of whether the compile succeeds or fails, the BASIC files will be synchronized to the U2 server, overwriting the existing ones and new files will also be created. Generated objective files will not be synchronized from the server to the local machine. Compilation does not work properly when VS Code and the extension installed on Linux platform.","title":"Compiling BASIC Program Files"},{"location":"usage/Compile/#compile-and-catalog","text":"There are 3 methods for compiling BASIC program files:","title":"Compile and catalog"},{"location":"usage/Compile/#from-editor-context","text":"Right-click in the file you want to compile then select \"Compile BASIC programs\". If there are no other modified files in your project, the compile process will be started immediately. If other modified files exist, a list of modified files will display. Select files you want to compile, and then click \"OK\". The compilation result will display in the VS Code terminal. Note : Using this method, compiled programs will not be cataloged. For UniData, different flavors are supported. Right-click in the file you want to compile then select \"Compile BASIC programs\". It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value.","title":"From editor context"},{"location":"usage/Compile/#from-a-file-explorer","text":"Select one or more files, then right click the file(s) and select \"Compile selected BASIC programs\". The compilation result will display in the VS Code terminal. Note : Using this method, compiled programs will not be cataloged.","title":"From a file explorer"},{"location":"usage/Compile/#through-vs-code-task","text":"By using VS Code task, users can compile or catalog multiple BASIC programs at the same time.","title":"Through VS Code task"},{"location":"usage/Compile/#create-a-basic-build-task","text":"Select \"Configure Default Build Task ...\" or \"Configure Tasks ...\" from the \"Terminal\" menu to open the Command Palette. Select \"BASIC: build\" to create a BASIC build task. A default build task configuration will be created and displayed in the editor. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [], \"compile\": { \"dataSource\": \"UNIVERSE\", \"arguments\": \"\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } If the project already has a build task, please see Example 4 (UniVerse) or Example 3 (UniData) for instructions on how to add a new build task.","title":"Create a BASIC build task"},{"location":"usage/Compile/#task-properties","text":"You can find task properties in the VS Code official documents . There are also some BASIC compilation specified properties: type : must be set to \"BASIC\". This is used to identify that the current task is a BASIC build task. targets : a list that contains the files you want to compile. The value should be the file's relative path. Please see the examples section for more details. compile : compilation related settings. It contains following configurable items. dataSource : Must be \"UNIVERSE\" or \"UNIDATA\", depending on the connected U2 server. language : (For UniData only) The programming language flavor. Must be \"UniBasic\" or \"Pick\". If not set, \"UniBasic\" is the default, but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. catalog : For UniVerse, you can select \"global\", \"local\" or \"normal\". For UniData, you can select \"global\", \"local\" or \"direct\". If not set, files will not be cataloged. initialCharacter : (For UniVerse only) The initial character of the cataloged program can only be set when the catalog parameter is set to \u201cglobal\u201d. arguments : Put additional compilation arguments here. For more details, please refer UniVerse / UniData user manual for more details. By default, this setting doesn\u2019t appear in the configuration file. Please add it manually if needed.","title":"Task properties"},{"location":"usage/Compile/#run-build-task","text":"Select \"Run build task\" from the \"Terminal\" menu to start the build task. Note 1 : Ensure that a U2 server has been connected. Otherwise, an error will occur. Note 2 : Once you click on \"Run build task,\" it will compile BASIC using the compile flavor value set to ud_compile_flavor in the basic.mvbasic.json file, instead of compiling with the \"language\" value specified in the task (for Unidata).","title":"Run build task"},{"location":"usage/Compile/#universe-compile-task-examples","text":"Example 1 . Compile a single BASIC program without cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIVERSE\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add the source code relative path to \"targets\". In this example, SAMPLE_FILE is in the BP folder. \"dataSource\" must be \"UNIVERSE\" for UniVerse. Don't set \"catalog\" and \"initialCharacter\" if you don't catalog programs. Example 2 . Compile multiple BASIC program files and perform global cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"global\", \"initialCharacter\": \"Asterisk mark (*)\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } You can add multiple source code relative paths to \"targets\" Set \"catalog\" to \"global\" if you want to perform global cataloging If the \"catalog\" type is global, you need set \"initialCharacter\", or the default value \"Asterisk mark (*)\" will be used Example 3 . Compile multiple BASIC program files and perform local cataloging. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"local\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Set \"catalog\" to \"local\"(no need to set \"initialCharacter\") Example 4 . Multiple build tasks. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\" ], \"compile\": { \"dataSource\":\"UNIVERSE\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 1\", \"group\": { \"kind\": \"build\", \"isDefault\": true } }, { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"catalog\": \"global\", \"initialCharacter\": \"Asterisk mark (*)\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 2\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add another task object in \"tasks\" Change the \"label\" in the tasks. When you run build tasks, you can select one of these tasks","title":"UniVerse Compile Task Examples"},{"location":"usage/Compile/#unidata-compile-task-examples","text":"Example 1 . Compile a single BASIC program without cataloging, language flavor is UniBasic. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add source code relative path to \"targets\". In this example, SAMPLE_FILE is in the BP folder \"dataSource\" must be \"UNIDATA\" for UniData No need to set \"catalog\" if you don't want to catalog programs You can select the language flavor in \"language\". In this example, the language flavor is \"UniBasic\", but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. Example 2 . Compile multiple BASIC program files and perform global cataloging, language flavor is Pick. { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\", \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"Pick\", \"catalog\": \"global\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } You can add multiple source code relative paths to \"targets\" Set \"language\" to \"Pick\" flavor, but It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. Set \"catalog\" to \"global\" if you want to perform global cataloging Example 3 . Multiple tasks { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE1\" ], \"compile\": { \"dataSource\":\"UNIDATA\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 1\", \"group\": { \"kind\": \"build\", \"isDefault\": true } }, { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE2\", \"BP/SAMOLE_FILE3\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" \"catalog\": \"global\" }, \"problemMatcher\": [], \"label\": \"BASIC Build Task 2\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Add another task object in \"tasks\" Change \"label\" in the tasks, When run build tasks, you can select one of these tasks Example 4 . Additional compilation arguments { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIVERSE\", \"arguments\": \"-L -X\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } Compile the BASIC program with arguments \"-L\" and \"-X\".","title":"UniData Compile Task Examples"},{"location":"usage/Compile/#unidata-compile-flavor-in-basicmvbasicjson-file","text":"By Uusing the VS Code task, users can compile or catalog multiple BASIC programs at the same time. BASIC compilation will use the specified Task propetiesproperties (except the \"language\" property). { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"BASIC\", \"targets\": [ \"BP/SAMPLE_FILE\" ], \"compile\": { \"dataSource\":\"UNIDATA\", \"language\": \"UniBasic\" }, \"problemMatcher\": [], \"label\": \"BASIC: Build\", \"group\": { \"kind\": \"build\", \"isDefault\": true } } ] } It will read the language value from the basic.mvbasic.json file, with the value set to: \"ud_compile_flavor\" { \"catalog\": \"direct\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"Pick\" } Example 1 . Compile a single BASIC program with flavor UniBasic. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"UniBasic\" } Example 2 . Compile a single BASIC program with flavor revelation. { \"catalog\": \"local\", \"arguments\": \"\", \"initialCharacter\": \"\", \"ud_compile_flavor\": \"revelation\" }","title":"Unidata Compile Flavor in basic.mvbasic.json File"},{"location":"usage/Completion/","text":"Using Auto-Completion When editing a BASIC program, the auto-completion function can prompt and complete what is currently being edited according to the contextual environment. The completion includes: Statements and keywords Symbols, functions, subroutines, labels, etc; File names and program names For some special BASIC statements, auto-completion also has some advanced functionality: CALL statement If you do not connect to a MultiValue server, catalog names in CALL statements can be completed based on the currently opened account folder. Please refer to Catalog settings . If you connect to a MultiValue server, the extension can get all catalog program names from the server and list them. To connect to a MultiValue server, please refer to Connection settings . INCLUDE statement In the INLCUDE statement, the auto-completion function can complete the file name and program name in the statement. By default, only the file names and program names in the current account folder can be auto completed, but you can add additional account folders by modifying the configuration file, so that when you are typing INCLUDE statements, the file names and program names from the additional accounts will also be prompted. Please refer to Accounts settings and Include section for more details. (note \u2026 no link present for Include section)","title":"Using Auto Completion"},{"location":"usage/Completion/#using-auto-completion","text":"When editing a BASIC program, the auto-completion function can prompt and complete what is currently being edited according to the contextual environment. The completion includes: Statements and keywords Symbols, functions, subroutines, labels, etc; File names and program names For some special BASIC statements, auto-completion also has some advanced functionality: CALL statement If you do not connect to a MultiValue server, catalog names in CALL statements can be completed based on the currently opened account folder. Please refer to Catalog settings . If you connect to a MultiValue server, the extension can get all catalog program names from the server and list them. To connect to a MultiValue server, please refer to Connection settings . INCLUDE statement In the INLCUDE statement, the auto-completion function can complete the file name and program name in the statement. By default, only the file names and program names in the current account folder can be auto completed, but you can add additional account folders by modifying the configuration file, so that when you are typing INCLUDE statements, the file names and program names from the additional accounts will also be prompted. Please refer to Accounts settings and Include section for more details. (note \u2026 no link present for Include section)","title":"Using Auto-Completion"},{"location":"usage/ConfigDap/","text":"Configure Debugging Binaries Please check whether this feature is supported for your U2 server and platform according this page . If yes, you need download and configure related binaries. If not, do not change your environment. To configure the debugging related binaries, please follow below steps. UniVerse Windows Copy uddap_server and uddap_slave from the package to your UniVerse bin folder. E.g., C:\\U2\\UV\\bin Verify whether the unirpcservices file contains grpcs service. If grpcs service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: grpcs <full_path_to_grpcs.exe> * TCP/IP 0 3600 The 'unirpcservices' file can be found in your U2 server installation folder: for example, C:\\U2\\unishared\\unirpc\\unirpcservices . Linux Copy uddap_server and uddap_slave from the package to your UniVerse bin folder. For example, /usr/u2/uv/bin/ Verify whether the unirpcservices file contains the grpcs service. If the grpcs service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: grpcs <full_path_to_grpcs> * TCP/IP 0 3600 The unirpcservices file can be found in your U2 server installation folder. For example, /usr/u2/unishared/unirpc/unirpcservices . UniData Windows Copy uddap_server.exe and uddap_slave.exe from the package to your UniData bin folder. E.g., C:\\U2\\ud83\\bin Verify whether the unirpcservices file contains uddap_server service. If uddap_server service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: uddap_server <full_path_to_uddap_server.exe> * TCP/IP 0 3600 The 'unirpcservices' file can be found in your U2 server installation folder: for example, C:\\U2\\unishared\\unirpc\\unirpcservices . Linux Copy uddap_server and uddap_slave from the package to your UniData bin folder. For example, /usr/u2/ud83/bin/ Verify whether the unirpcservices file contains the uddap_server service. If the uddap_server service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: uddap_server <full_path_to_uddap_server> * TCP/IP 0 3600 The unirpcservices file can be found in your U2 server installation folder. For example, /usr/u2/unishared/unirpc/unirpcservices .","title":"ConfigDap"},{"location":"usage/ConfigDap/#configure-debugging-binaries","text":"Please check whether this feature is supported for your U2 server and platform according this page . If yes, you need download and configure related binaries. If not, do not change your environment. To configure the debugging related binaries, please follow below steps.","title":"Configure Debugging Binaries"},{"location":"usage/ConfigDap/#universe","text":"","title":"UniVerse"},{"location":"usage/ConfigDap/#windows","text":"Copy uddap_server and uddap_slave from the package to your UniVerse bin folder. E.g., C:\\U2\\UV\\bin Verify whether the unirpcservices file contains grpcs service. If grpcs service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: grpcs <full_path_to_grpcs.exe> * TCP/IP 0 3600 The 'unirpcservices' file can be found in your U2 server installation folder: for example, C:\\U2\\unishared\\unirpc\\unirpcservices .","title":"Windows"},{"location":"usage/ConfigDap/#linux","text":"Copy uddap_server and uddap_slave from the package to your UniVerse bin folder. For example, /usr/u2/uv/bin/ Verify whether the unirpcservices file contains the grpcs service. If the grpcs service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: grpcs <full_path_to_grpcs> * TCP/IP 0 3600 The unirpcservices file can be found in your U2 server installation folder. For example, /usr/u2/unishared/unirpc/unirpcservices .","title":"Linux"},{"location":"usage/ConfigDap/#unidata","text":"","title":"UniData"},{"location":"usage/ConfigDap/#windows_1","text":"Copy uddap_server.exe and uddap_slave.exe from the package to your UniData bin folder. E.g., C:\\U2\\ud83\\bin Verify whether the unirpcservices file contains uddap_server service. If uddap_server service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: uddap_server <full_path_to_uddap_server.exe> * TCP/IP 0 3600 The 'unirpcservices' file can be found in your U2 server installation folder: for example, C:\\U2\\unishared\\unirpc\\unirpcservices .","title":"Windows"},{"location":"usage/ConfigDap/#linux_1","text":"Copy uddap_server and uddap_slave from the package to your UniData bin folder. For example, /usr/u2/ud83/bin/ Verify whether the unirpcservices file contains the uddap_server service. If the uddap_server service doesn't exist, you must add it manually. Add the new service as shown below to the unirpcservices file: uddap_server <full_path_to_uddap_server> * TCP/IP 0 3600 The unirpcservices file can be found in your U2 server installation folder. For example, /usr/u2/unishared/unirpc/unirpcservices .","title":"Linux"},{"location":"usage/Configuration/","text":"Configuration There are many configuration settings for the Rocket MV BASIC extension. These settings are organized into different configuration files. Press F1 to open the command window and then enter the \" Edit Configuration of Rocket MV BASIC \" command. There are three configuration files: \"Database and BASIC Related Configuration\", \"Formatting Configuration\" and \"Group View Configuration\". If there are multiple workspace folders, you can select the folder to edit. Configuration files in different workspace folders have no relationship or dependency. Database and BASIC Related Configuration The configuration file name is \"db.mvbasic.json\". Following relevant configurations are included: U2 server connection. See U2 connection for more information. Additional accounts. See accounts settings for more information. Catalog programs configuration. See Catalog Settings in \"db.mvbasic.json\" file for more information. Include files configuration. See include settings for more information. Formatting Configuration The configuration file name is \"format.mvbasic.json\". This configuration file contains the settings for feature Document Formatting. If you need change the formatting settings, please update the settings in this file. See formatting settings for more information. Group View Configuration The configuration file name is \"groupView.mvbasic.json\". This configuration file contains the settings for feature Group View. If you need change the group view behaviors, please update the settings in this file. See group view settings for more information. Catalog Configuration The configuration file name is \"basic.mvbasic.json\". This configuration file contains the parameters for the Catalog feature. If you need to change the catalog type, arguments, or initial character, please update the settings in this file. See Catalog Settings in \"basic.mvbasic.json\" file for more information. Note: If either ./rmv or ./rmvonline configuration exists, the basic.mvbasic.json file will be created during the first catalog attempt. If the ./rmv configuration does not exist, the config/basic.mvbasic.json file will be created when the extension is activated. Configuration Files There are also user level configuration files in the user profile. When you want to apply some settings to all projects of the current user, you can modify the user-level configuration files. The user level configuration files are in the the user profile folder. For Windows platforms, you can find configuration files in \"C:\\Users\\ yourusername \\.rmv\\config\\\". For Linux platforms, you can find configuration files in \"/home/ yourusername /.rmv/config/\".","title":"Configuration"},{"location":"usage/Configuration/#configuration","text":"There are many configuration settings for the Rocket MV BASIC extension. These settings are organized into different configuration files. Press F1 to open the command window and then enter the \" Edit Configuration of Rocket MV BASIC \" command. There are three configuration files: \"Database and BASIC Related Configuration\", \"Formatting Configuration\" and \"Group View Configuration\". If there are multiple workspace folders, you can select the folder to edit. Configuration files in different workspace folders have no relationship or dependency.","title":"Configuration"},{"location":"usage/Configuration/#database-and-basic-related-configuration","text":"The configuration file name is \"db.mvbasic.json\". Following relevant configurations are included: U2 server connection. See U2 connection for more information. Additional accounts. See accounts settings for more information. Catalog programs configuration. See Catalog Settings in \"db.mvbasic.json\" file for more information. Include files configuration. See include settings for more information.","title":"Database and BASIC Related Configuration"},{"location":"usage/Configuration/#formatting-configuration","text":"The configuration file name is \"format.mvbasic.json\". This configuration file contains the settings for feature Document Formatting. If you need change the formatting settings, please update the settings in this file. See formatting settings for more information.","title":"Formatting Configuration"},{"location":"usage/Configuration/#group-view-configuration","text":"The configuration file name is \"groupView.mvbasic.json\". This configuration file contains the settings for feature Group View. If you need change the group view behaviors, please update the settings in this file. See group view settings for more information.","title":"Group View Configuration"},{"location":"usage/Configuration/#catalog-configuration","text":"The configuration file name is \"basic.mvbasic.json\". This configuration file contains the parameters for the Catalog feature. If you need to change the catalog type, arguments, or initial character, please update the settings in this file. See Catalog Settings in \"basic.mvbasic.json\" file for more information. Note: If either ./rmv or ./rmvonline configuration exists, the basic.mvbasic.json file will be created during the first catalog attempt. If the ./rmv configuration does not exist, the config/basic.mvbasic.json file will be created when the extension is activated.","title":"Catalog Configuration"},{"location":"usage/Configuration/#configuration-files","text":"There are also user level configuration files in the user profile. When you want to apply some settings to all projects of the current user, you can modify the user-level configuration files. The user level configuration files are in the the user profile folder. For Windows platforms, you can find configuration files in \"C:\\Users\\ yourusername \\.rmv\\config\\\". For Linux platforms, you can find configuration files in \"/home/ yourusername /.rmv/config/\".","title":"Configuration Files"},{"location":"usage/Connection/","text":"U2 Connection Settings The Rocket MV BASIC extension can also connect to a U2 server. Regardless of whether you are connected to a server or not, all editor functions will work as expected. But when connected to a U2 server, some new features will be enabled, and some features will be enhanced: Goto definition Auto-completion Catalog Compile BASIC program Debugging BASIC program Settings Please refer to Configuration to open the configuration file. Following settings are used for U2 connection. \"db\": { \"host\": \"\", \"userName\": \"\", \"password\": \"\", \"account\": \"\", \"dataSource\": \"UNIVERSE\", \"port\": 31438, \"rpcName\": \"\" }, host : host name or address of a U2 server. userName : user name to login to the U2 server. password : password to login to the U2 server. account : account name of a U2 server. dataSource : UNIVERSE or UNIDATA , by default is UNIVERSE . If open multiple workspace folders and set differnet data source in these folders' configuration files, VS Code will choose the root folder's data source as default. port : port number of U2 server. For UniVerse and UniData, the port number is 31438 by default. rpcName : optional. Specifies the name of the remote procedure call (RPC) to be used. Common RPC names for UNIDATA and UNIVERSE are udcs and uvcs , respectively, but custom RPC names can be configured as needed. Note : Please enter these settings before connecting to the server. Connect to Server Press F1 to open the command window and then enter the command \"Connect/Disconnect U2 Server\" to connect to the server. If some settings are not set in the configuration file, you will need provide these values when prompted in the command window. If you have multiple workspace folders and have configured multiple U2 accounts, you can select one account from the accounts list or input the account information manually. Same account level folder could be opened by different workspaces and connected to the U2 server separately. Disconnect from Server Press F1 to open the command window and then enter the Disconnect from MV Server command to disconnect to the server. Connection status The connection status icon is displayed in the bottom-left corner. Click the icon to connect to or disconnect from the U2 server.","title":"U2 Connection Settings"},{"location":"usage/Connection/#u2-connection-settings","text":"The Rocket MV BASIC extension can also connect to a U2 server. Regardless of whether you are connected to a server or not, all editor functions will work as expected. But when connected to a U2 server, some new features will be enabled, and some features will be enhanced: Goto definition Auto-completion Catalog Compile BASIC program Debugging BASIC program","title":"U2 Connection Settings"},{"location":"usage/Connection/#settings","text":"Please refer to Configuration to open the configuration file. Following settings are used for U2 connection. \"db\": { \"host\": \"\", \"userName\": \"\", \"password\": \"\", \"account\": \"\", \"dataSource\": \"UNIVERSE\", \"port\": 31438, \"rpcName\": \"\" }, host : host name or address of a U2 server. userName : user name to login to the U2 server. password : password to login to the U2 server. account : account name of a U2 server. dataSource : UNIVERSE or UNIDATA , by default is UNIVERSE . If open multiple workspace folders and set differnet data source in these folders' configuration files, VS Code will choose the root folder's data source as default. port : port number of U2 server. For UniVerse and UniData, the port number is 31438 by default. rpcName : optional. Specifies the name of the remote procedure call (RPC) to be used. Common RPC names for UNIDATA and UNIVERSE are udcs and uvcs , respectively, but custom RPC names can be configured as needed. Note : Please enter these settings before connecting to the server.","title":"Settings"},{"location":"usage/Connection/#connect-to-server","text":"Press F1 to open the command window and then enter the command \"Connect/Disconnect U2 Server\" to connect to the server. If some settings are not set in the configuration file, you will need provide these values when prompted in the command window. If you have multiple workspace folders and have configured multiple U2 accounts, you can select one account from the accounts list or input the account information manually. Same account level folder could be opened by different workspaces and connected to the U2 server separately.","title":"Connect to Server"},{"location":"usage/Connection/#disconnect-from-server","text":"Press F1 to open the command window and then enter the Disconnect from MV Server command to disconnect to the server.","title":"Disconnect from Server"},{"location":"usage/Connection/#connection-status","text":"The connection status icon is displayed in the bottom-left corner. Click the icon to connect to or disconnect from the U2 server.","title":"Connection status"},{"location":"usage/CustomizeDoc/","text":"Customize Documentation Usage You can provide your own documentation for user-defined functions / subroutines. Complete the steps below to provide your own documentation: (These instructions assume you have a user-defined function named USERFUNC ) Step 1 . Activate Rocket MV BASIC extension. Step 2 . Open the documentation configuration file (\".rmv/documentation/universe/custom.json\" for UniVerse, or \".mvx-ide/documentation/unidata/custom.json\" for UniData). Step 3 . Add the customized function's content as illustrated below for function USERFUNC. Add the function / subroutine names in the configuration file and then add its detailed documentation. brief : Optional. You can add a brief description of customized function in this setting. If the detail setting is not set, this brief description will be displayed when you hover over the customized function / subroutine. detail : Optional. You can add a relative path that points to a markdown file here. When you hover over the customized function / subroutine, the content in the markdown file will be displayed. Note : The brief item provides a brief description of USERFUNC if the detail setting doesn't exist. If the detail setting exists, the markdown file pointed to by this setting will be used.","title":"Customized Documentation"},{"location":"usage/CustomizeDoc/#customize-documentation-usage","text":"You can provide your own documentation for user-defined functions / subroutines. Complete the steps below to provide your own documentation: (These instructions assume you have a user-defined function named USERFUNC ) Step 1 . Activate Rocket MV BASIC extension. Step 2 . Open the documentation configuration file (\".rmv/documentation/universe/custom.json\" for UniVerse, or \".mvx-ide/documentation/unidata/custom.json\" for UniData). Step 3 . Add the customized function's content as illustrated below for function USERFUNC. Add the function / subroutine names in the configuration file and then add its detailed documentation. brief : Optional. You can add a brief description of customized function in this setting. If the detail setting is not set, this brief description will be displayed when you hover over the customized function / subroutine. detail : Optional. You can add a relative path that points to a markdown file here. When you hover over the customized function / subroutine, the content in the markdown file will be displayed. Note : The brief item provides a brief description of USERFUNC if the detail setting doesn't exist. If the detail setting exists, the markdown file pointed to by this setting will be used.","title":"Customize Documentation Usage"},{"location":"usage/DAPRelease/","text":"Debugging Binaries Release A high-performance debugging feature has been introduced in Rocket MV BASIC. To use this feature, you need to upgrade UniVerse to version 11.4.1 or later, or upgrade UniData to version 8.3.1 or later . If you decide not to upgrade, you can continue using the original debugging feature available on previous versions of the U2 server. Below is a detailed breakdown of the information for each release. This high-performance debugging feature is only supported on UniVerse version 11.4.1 / UniData 8.3.1 for Windows and Linux platforms. If you are using UniVerse 11.4.1 / UniData 8.3.1 there is no need to manually download and configure these binaries, they are already included in this release. UniVerse Version Windows Linux AIX 14.1.1 \u2714\ufe0f \u2714\ufe0f \u274c 11.4.1 \u2714\ufe0f \u2714\ufe0f \u274c < 11.4.1 \u274c \u274c \u274c UniData Version Windows Linux AIX 8.3.1 \u2714\ufe0f \u2714\ufe0f \u274c < 8.3.1 \u274c \u274c \u274c Please note that versions of UniVerse prior to 11.4.1 and versions of UniData prior to 8.3.1 do not support this feature and associated binaries. Assets Please download dap_agent binaries from GitHub release .","title":"DAP Binaries"},{"location":"usage/DAPRelease/#debugging-binaries-release","text":"A high-performance debugging feature has been introduced in Rocket MV BASIC. To use this feature, you need to upgrade UniVerse to version 11.4.1 or later, or upgrade UniData to version 8.3.1 or later . If you decide not to upgrade, you can continue using the original debugging feature available on previous versions of the U2 server. Below is a detailed breakdown of the information for each release. This high-performance debugging feature is only supported on UniVerse version 11.4.1 / UniData 8.3.1 for Windows and Linux platforms. If you are using UniVerse 11.4.1 / UniData 8.3.1 there is no need to manually download and configure these binaries, they are already included in this release. UniVerse Version Windows Linux AIX 14.1.1 \u2714\ufe0f \u2714\ufe0f \u274c 11.4.1 \u2714\ufe0f \u2714\ufe0f \u274c < 11.4.1 \u274c \u274c \u274c UniData Version Windows Linux AIX 8.3.1 \u2714\ufe0f \u2714\ufe0f \u274c < 8.3.1 \u274c \u274c \u274c Please note that versions of UniVerse prior to 11.4.1 and versions of UniData prior to 8.3.1 do not support this feature and associated binaries.","title":"Debugging Binaries Release"},{"location":"usage/DAPRelease/#assets","text":"Please download dap_agent binaries from GitHub release .","title":"Assets"},{"location":"usage/Debugging/","text":"Debugging With the debugging function, users can easily debug BASIC programs, as well as observe and track the results and changes to variables for each step when running a BASIC program. The following U2 server versions and platforms are supported: UniVerse Versions: For offline mode debugging 11.3.2 or higher and for online mode debugging 11.4.1 and higher Platforms: Windows, Linux, AIX UniData Versions: For offline mode debugging 8.2.4 or higher and for online mode debugging 8.3.1 and higher Platforms: Windows, Linux, AIX Note: For more details, please refer Rocket-MV-BASIC-Extension-features-support-matrix . A high performance debugging feature A high-performance debugging feature is supported on UniVerse 11.4.1 and UniData 8.3.1. To use this feature, you must upgrade to UniVerse 11.4.1 / UniData 8.3.1 or higher version. Please see Debugging Binaries Releases for more details. Start Debugging Note : You should not debug BASIC subroutines directly, because this not allowed in UniVerse and UniData. Connecting to a U2 server account folder Before using the debugging feature, you must connect to a U2 server account folder firstly. Please see the Connection section for offline mode and Online Editing for online mode to learn how to connect to a U2 server account. Note : The debugging feature will not work if you only open a single BASIC program file in VS Code. You must open an account folder. Debugging BASIC files There are 2 methods to debug a BASIC program file: debugging without a launch file and debugging with a launch file. Before debugging, open the BASIC program first. Note : debugging a BASIC subroutine directly is not allowed. Debugging without a launch file Note : Debugging without a launch file works properly in offline mode only; in online mode, please create launch file. Click the Run and Debug icon on from the left menu bar. The Run and Debug view will display if you have no launch.json file in your project. Click the Run and Debug button to start debugging the currently focused BASIC program file. The BASIC program file will be compiled first. For UniData, there are different compilation flavors and it will read the compile flavor from basic.mvbasic.json, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. On successful compilation, the debugging process will stop at the first runnable line of code in the program file. Debug with launch file You have the option to configure the type and task parameters in the launch.json file which helps VS Code know how to run and debug your code. launch.json file helps VSCode know how to run and debug your code. launch.json in MVVS has the type and task parameters, it means that VSCode is first running a task before starting the debugging process. type: The type parameter tells VS Code what type of code you're working with. Valid values are: MVBasic, Python. task: The task parameter is a step that needs to happen before debugging starts, like preparing your code. You have the option to tell VS Code which debugging settings to use in the launch.json file. In the Run and Debug view, click the create a launch.json file link. Select the MVBasic Debug from the Select environment dialog box. A default debugging configuration file named launch.json is generated in directory .vscode and contains the following. { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"mvbasic\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"\", \"stopOnEntry\": true, \"preLaunchTask\": \"BASIC: Build\", \"dependencies\": [], \"arguments\": \"\" } ] } \"type\": \"mvbasic\" is required to build BASIC program files. \"request\": keep this value \"launch\" to launch a program. \"name\": this is the name of the launch task. You can change the name to other values. \"program\": if this value is empty, current focused file will be debugged. You can also set this value to another BASIC program file's absolute path. This file will be compiled before debugging. \"stopOnEntry\": used to control whether the program will be stopped at the first runnable line when start debugging. Currently only true is supported. \"preLaunchTask\": this is used to run pre-required task before debugging. In our extension, we use this setting to compile the BASIC program in setting \"program\" first. \"dependencies\": put other BASIC program files' absolute paths here if they need to be compiled before debugging. For example, \"C:\\U2\\UV\\XDEMO\\TEST\". \"arguments\": put additional debugging online\u00b7 here. Please refer to your UniVerse / UniData user documentation for more details. By default, this setting doesn\u2019t appear in the configuration file, but can be added manually if needed. To enable debugging in online mode, the tasks.json file is required. For online mode, create a build task as shown in Online Editing . For more details on task refer Compile . From the Run and Debug view, set the launch option to Launch Program . Then press the F5 button to start debugging. Support Operations The following debug operations are supported. Note In online mode, the source code is accessed virtually. When debugging starts, the source code always comes from the U2 debugger service, (which is why a different file is launched for debugging). Setting break point When debugging starts, you can set a break point by: Clicking the head of a line Pressing the F9 key for an in-focus line. You can find all break points in BREAKPOINTS panel of the Run and Debug view. Note In online mode, a different file is launched for debugging, so and breakpoints are applied to that file as well. As a result, the user will see the same breakpoints in the \"BREAKPOINTS\" view, but in two different files. The program will stop when the process encounters a break point. Note : Condition breakpoints are not supported. Continue When the process encounters a break point, the program will stop running. You can press the F5 key or click the Continue button from the debug panel to continue running the program. Note : Program cannot jump out of a subroutine through this operation in UniVerse. Step over The step over function allows you to run the program line-by-line. Press the F10 button or click the Step Over button from the debug panel to run one line of the program. Note : Program cannot jump out of a subroutine through this operation in UniVerse. Step into and step out These two operations are still not stable. They partially work if breakpoints are set at CALL line. Please refer Known Issues . Note : Program cannot jump out of a subroutine through Step Out operation in UniVerse. Restart debug Click restart button to restart debugging process. Stop debugging Click the Stop button to stop the debugging process. View variables When debugging starts, you can view all variables in the Run and Debug view. You can also change a variable's value by double-clicking it in the Run and Debug view (this only works on UniVerse 11.4.1 / UniData 8.3.1). If variables have no value or have not been initialized, the variable\u2019s value is undefined. Watch variables You can also add variables to the WATCH panel. Click the plus (+) button from the WATCH panel and enter the variable name to display the variable\u2019s value. Note : Only variables are supported. Expressions are not supported. Handle input operation You can switch to the VS Code terminal to handle an INPUT statement during BASIC program running.","title":"Debugging"},{"location":"usage/Debugging/#debugging","text":"With the debugging function, users can easily debug BASIC programs, as well as observe and track the results and changes to variables for each step when running a BASIC program. The following U2 server versions and platforms are supported:","title":"Debugging"},{"location":"usage/Debugging/#universe","text":"Versions: For offline mode debugging 11.3.2 or higher and for online mode debugging 11.4.1 and higher Platforms: Windows, Linux, AIX","title":"UniVerse"},{"location":"usage/Debugging/#unidata","text":"Versions: For offline mode debugging 8.2.4 or higher and for online mode debugging 8.3.1 and higher Platforms: Windows, Linux, AIX Note: For more details, please refer Rocket-MV-BASIC-Extension-features-support-matrix .","title":"UniData"},{"location":"usage/Debugging/#a-high-performance-debugging-feature","text":"A high-performance debugging feature is supported on UniVerse 11.4.1 and UniData 8.3.1. To use this feature, you must upgrade to UniVerse 11.4.1 / UniData 8.3.1 or higher version. Please see Debugging Binaries Releases for more details.","title":"A high performance debugging feature"},{"location":"usage/Debugging/#start-debugging","text":"Note : You should not debug BASIC subroutines directly, because this not allowed in UniVerse and UniData.","title":"Start Debugging"},{"location":"usage/Debugging/#connecting-to-a-u2-server-account-folder","text":"Before using the debugging feature, you must connect to a U2 server account folder firstly. Please see the Connection section for offline mode and Online Editing for online mode to learn how to connect to a U2 server account. Note : The debugging feature will not work if you only open a single BASIC program file in VS Code. You must open an account folder.","title":"Connecting to a U2 server account folder"},{"location":"usage/Debugging/#debugging-basic-files","text":"There are 2 methods to debug a BASIC program file: debugging without a launch file and debugging with a launch file. Before debugging, open the BASIC program first. Note : debugging a BASIC subroutine directly is not allowed.","title":"Debugging BASIC files"},{"location":"usage/Debugging/#debugging-without-a-launch-file","text":"Note : Debugging without a launch file works properly in offline mode only; in online mode, please create launch file. Click the Run and Debug icon on from the left menu bar. The Run and Debug view will display if you have no launch.json file in your project. Click the Run and Debug button to start debugging the currently focused BASIC program file. The BASIC program file will be compiled first. For UniData, there are different compilation flavors and it will read the compile flavor from basic.mvbasic.json, with the value set to: \"ud_compile_flavor\". Please see this section to set ud_compile_flavor value. On successful compilation, the debugging process will stop at the first runnable line of code in the program file.","title":"Debugging without a launch file"},{"location":"usage/Debugging/#debug-with-launch-file","text":"You have the option to configure the type and task parameters in the launch.json file which helps VS Code know how to run and debug your code. launch.json file helps VSCode know how to run and debug your code. launch.json in MVVS has the type and task parameters, it means that VSCode is first running a task before starting the debugging process. type: The type parameter tells VS Code what type of code you're working with. Valid values are: MVBasic, Python. task: The task parameter is a step that needs to happen before debugging starts, like preparing your code. You have the option to tell VS Code which debugging settings to use in the launch.json file. In the Run and Debug view, click the create a launch.json file link. Select the MVBasic Debug from the Select environment dialog box. A default debugging configuration file named launch.json is generated in directory .vscode and contains the following. { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"mvbasic\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"\", \"stopOnEntry\": true, \"preLaunchTask\": \"BASIC: Build\", \"dependencies\": [], \"arguments\": \"\" } ] } \"type\": \"mvbasic\" is required to build BASIC program files. \"request\": keep this value \"launch\" to launch a program. \"name\": this is the name of the launch task. You can change the name to other values. \"program\": if this value is empty, current focused file will be debugged. You can also set this value to another BASIC program file's absolute path. This file will be compiled before debugging. \"stopOnEntry\": used to control whether the program will be stopped at the first runnable line when start debugging. Currently only true is supported. \"preLaunchTask\": this is used to run pre-required task before debugging. In our extension, we use this setting to compile the BASIC program in setting \"program\" first. \"dependencies\": put other BASIC program files' absolute paths here if they need to be compiled before debugging. For example, \"C:\\U2\\UV\\XDEMO\\TEST\". \"arguments\": put additional debugging online\u00b7 here. Please refer to your UniVerse / UniData user documentation for more details. By default, this setting doesn\u2019t appear in the configuration file, but can be added manually if needed.","title":"Debug with launch file"},{"location":"usage/Debugging/#to-enable-debugging-in-online-mode-the-tasksjson-file-is-required","text":"For online mode, create a build task as shown in Online Editing . For more details on task refer Compile . From the Run and Debug view, set the launch option to Launch Program . Then press the F5 button to start debugging.","title":"To enable debugging in online mode, the tasks.json file is required."},{"location":"usage/Debugging/#support-operations","text":"The following debug operations are supported. Note In online mode, the source code is accessed virtually. When debugging starts, the source code always comes from the U2 debugger service, (which is why a different file is launched for debugging).","title":"Support Operations"},{"location":"usage/Debugging/#setting-break-point","text":"When debugging starts, you can set a break point by: Clicking the head of a line Pressing the F9 key for an in-focus line. You can find all break points in BREAKPOINTS panel of the Run and Debug view. Note In online mode, a different file is launched for debugging, so and breakpoints are applied to that file as well. As a result, the user will see the same breakpoints in the \"BREAKPOINTS\" view, but in two different files. The program will stop when the process encounters a break point. Note : Condition breakpoints are not supported.","title":"Setting break point"},{"location":"usage/Debugging/#continue","text":"When the process encounters a break point, the program will stop running. You can press the F5 key or click the Continue button from the debug panel to continue running the program. Note : Program cannot jump out of a subroutine through this operation in UniVerse.","title":"Continue"},{"location":"usage/Debugging/#step-over","text":"The step over function allows you to run the program line-by-line. Press the F10 button or click the Step Over button from the debug panel to run one line of the program. Note : Program cannot jump out of a subroutine through this operation in UniVerse.","title":"Step over"},{"location":"usage/Debugging/#step-into-and-step-out","text":"These two operations are still not stable. They partially work if breakpoints are set at CALL line. Please refer Known Issues . Note : Program cannot jump out of a subroutine through Step Out operation in UniVerse.","title":"Step into and step out"},{"location":"usage/Debugging/#restart-debug","text":"Click restart button to restart debugging process.","title":"Restart debug"},{"location":"usage/Debugging/#stop-debugging","text":"Click the Stop button to stop the debugging process.","title":"Stop debugging"},{"location":"usage/Debugging/#view-variables","text":"When debugging starts, you can view all variables in the Run and Debug view. You can also change a variable's value by double-clicking it in the Run and Debug view (this only works on UniVerse 11.4.1 / UniData 8.3.1). If variables have no value or have not been initialized, the variable\u2019s value is undefined.","title":"View variables"},{"location":"usage/Debugging/#watch-variables","text":"You can also add variables to the WATCH panel. Click the plus (+) button from the WATCH panel and enter the variable name to display the variable\u2019s value. Note : Only variables are supported. Expressions are not supported.","title":"Watch variables"},{"location":"usage/Debugging/#handle-input-operation","text":"You can switch to the VS Code terminal to handle an INPUT statement during BASIC program running.","title":"Handle input operation"},{"location":"usage/Definition/","text":"Using Definition Use following methods to find a symbol's definition: Right click a symbol then select Goto Definition ; Move cursor to a symbol then press F12 ; Press and hold Ctrl button and click a symbol. For some special symbols, you need do some configuration before using this functionality. CALL Statement There are several different cases when you use Goto Definition on CALL statement / catalog programs to find its source code. Not Connected to U2 Server If the cataloged program is in the same folder as the currently opened file, the target file can be opened directly. If the cataloged program is in another sub-folder of the current account folder, you can do one of the following: Set isSearchAllDirs to true in the configuration file. Add the sub-folder name to the programDirs element in the configuration file. Please refer to Catalog settings for instructions on how to setup this configuration. If the cataloged program source code is in another account folder, you can: add the account folder to the configuration file. Please refer Accounts settings . add catalog program mapping settings to the programMapping element in the configuration file. Please refer to Catalog settings for instructions on how to setup this configuration. Connected to U2 Server When connected to a MultiValue server, Goto Definition can fetch catalog programs from the server to the local machine. Please refer to Connection settings for instructions on how to connect to a U2 server. For local cataloged programs , if the cataloged program name is the same as its source code file name, use Goto Definition directly. If the cataloged program name is different from its source code file name, you will need set the mapping relationship between cataloged program name and its source code name. Please refer to Catalog settings to configure the mapping relationship. For global cataloged programs , you need configure the global catalog program information which includes the account name and names mapping. Please refer to Catalog settings and Account settings for more details. INCLUDE Statement If the current opened file includes some other files through the INCLUDE statement, you can use Goto Definition to jump to a symbol's definition in the included file. Please refer to Include settings to setup the related configuration.","title":"Using Definition"},{"location":"usage/Definition/#using-definition","text":"Use following methods to find a symbol's definition: Right click a symbol then select Goto Definition ; Move cursor to a symbol then press F12 ; Press and hold Ctrl button and click a symbol. For some special symbols, you need do some configuration before using this functionality.","title":"Using Definition"},{"location":"usage/Definition/#call-statement","text":"There are several different cases when you use Goto Definition on CALL statement / catalog programs to find its source code.","title":"CALL Statement"},{"location":"usage/Definition/#not-connected-to-u2-server","text":"If the cataloged program is in the same folder as the currently opened file, the target file can be opened directly. If the cataloged program is in another sub-folder of the current account folder, you can do one of the following: Set isSearchAllDirs to true in the configuration file. Add the sub-folder name to the programDirs element in the configuration file. Please refer to Catalog settings for instructions on how to setup this configuration. If the cataloged program source code is in another account folder, you can: add the account folder to the configuration file. Please refer Accounts settings . add catalog program mapping settings to the programMapping element in the configuration file. Please refer to Catalog settings for instructions on how to setup this configuration.","title":"Not Connected to U2 Server"},{"location":"usage/Definition/#connected-to-u2-server","text":"When connected to a MultiValue server, Goto Definition can fetch catalog programs from the server to the local machine. Please refer to Connection settings for instructions on how to connect to a U2 server. For local cataloged programs , if the cataloged program name is the same as its source code file name, use Goto Definition directly. If the cataloged program name is different from its source code file name, you will need set the mapping relationship between cataloged program name and its source code name. Please refer to Catalog settings to configure the mapping relationship. For global cataloged programs , you need configure the global catalog program information which includes the account name and names mapping. Please refer to Catalog settings and Account settings for more details.","title":"Connected to U2 Server"},{"location":"usage/Definition/#include-statement","text":"If the current opened file includes some other files through the INCLUDE statement, you can use Goto Definition to jump to a symbol's definition in the included file. Please refer to Include settings to setup the related configuration.","title":"INCLUDE Statement"},{"location":"usage/Diagnostics/","text":"Diagnostics Diagnostics can help users find syntax and grammar errors while in the process of writing BASIC programs. A BASIC statement that contains an error is indicated with a red underscore. Diagnostics will also point out any variables that have been referenced before they have been defined.","title":"Diagnostics"},{"location":"usage/Diagnostics/#diagnostics","text":"Diagnostics can help users find syntax and grammar errors while in the process of writing BASIC programs. A BASIC statement that contains an error is indicated with a red underscore. Diagnostics will also point out any variables that have been referenced before they have been defined.","title":"Diagnostics"},{"location":"usage/DocumentSymbol/","text":"Using Document Symbols Open a BASIC program file to view all the symbols in the current document in VS Code outline window. If you click a symbol in the outline window, the cursor will indicate its location. You can also use a command to find a symbol. Press Ctrl + P to open the search window and then enter @ to list all symbols in current document. Type the first few characters of a symbol in the command window to filter the results, and then click the corresponding symbol to jump to its definition location.","title":"Document Symbol"},{"location":"usage/DocumentSymbol/#using-document-symbols","text":"Open a BASIC program file to view all the symbols in the current document in VS Code outline window. If you click a symbol in the outline window, the cursor will indicate its location. You can also use a command to find a symbol. Press Ctrl + P to open the search window and then enter @ to list all symbols in current document. Type the first few characters of a symbol in the command window to filter the results, and then click the corresponding symbol to jump to its definition location.","title":"Using Document Symbols"},{"location":"usage/FAQ/","text":"FAQ Q: How do I activate the extension automatically? A: By default, when open a file ends with a \".B\" suffix, the extension could be activated automatically. If your files don't have such suffix, you can setup file associations to activate the extension. Press F1 to open a command line in VS Code, then enter \" Open Settings (UI) \" to open the settings page. Search \" associations \" in the Settings page and find the setting \" Files: Associations \". Add an item in this setting (the item content accepts a glob pattern ). The item in the example image above specifies that the Rocket MV BASIC extension will be activated when any file in the BP folder is opened. Q: I have set the files association, but when I open a BASIC program file, the language changed. A: This is a new feature named \"Auto Detect Language\" of VS Code (since the 1.60 release). It auto detects and sets the language of your files even when you have already set files associations. You can disable this feature following the steps below: Open VS Code Settings: press F1, input \"setting\", then select \"Open Settings (UI)\" Search for \"auto detect\", and then find and disable the \"Language Detection\" setting. Q: How can I exclude specific files from a folder? For example, files start with \"_\". A: VS Code provides a function to exclude useless files. Follow the steps below to exclude files: Open VS Code Settings: press F1, input \"setting\", then select \"Open Settings (UI)\" Search for \"exclude\", and then find the setting \"Files: Exclude\" Click \"Add Pattern\", and then enter a pattern that exists in the file names you want to exclude. Q: Why sometimes the extension failed to upgrade on Windows platform? A: This is because some files of the extension still being used. To resolve this issue, please follow below steps: Uninstall MV BASIC extension first. Close all VS Code and java processes through task manager. Manually remove the MV BASIC extension directory under user profile. For example, you may find MV BASIC extension version 1.6.0 in \"C:\\Users\\user_name.vscode\\extensions\\rocketsoftware.rocket-mvbasic-1.6.0\". Restart VS Code and install the latest extension. Q: Why isn\u2019t the debugging functionality working? It was working well before. A: This may be a result of the VS Code upgrade. In VS Code 1.79.x, the debugging functionality has some updates which impact our extension. If you encounter debugging issues, please try to downgrade VS Code to version 1.78.2 (on which the debugging functionality should work well). Please refer VS Code Compatibility for more details. Q: How can I exclude specific files from the explorer view? A: You can update the vscode settings file \u201c.vscode/settings.json\u201d to exclude files. For more details, please refer VS Code official online documentation.","title":"FAQ"},{"location":"usage/FAQ/#faq","text":"Q: How do I activate the extension automatically? A: By default, when open a file ends with a \".B\" suffix, the extension could be activated automatically. If your files don't have such suffix, you can setup file associations to activate the extension. Press F1 to open a command line in VS Code, then enter \" Open Settings (UI) \" to open the settings page. Search \" associations \" in the Settings page and find the setting \" Files: Associations \". Add an item in this setting (the item content accepts a glob pattern ). The item in the example image above specifies that the Rocket MV BASIC extension will be activated when any file in the BP folder is opened. Q: I have set the files association, but when I open a BASIC program file, the language changed. A: This is a new feature named \"Auto Detect Language\" of VS Code (since the 1.60 release). It auto detects and sets the language of your files even when you have already set files associations. You can disable this feature following the steps below: Open VS Code Settings: press F1, input \"setting\", then select \"Open Settings (UI)\" Search for \"auto detect\", and then find and disable the \"Language Detection\" setting. Q: How can I exclude specific files from a folder? For example, files start with \"_\". A: VS Code provides a function to exclude useless files. Follow the steps below to exclude files: Open VS Code Settings: press F1, input \"setting\", then select \"Open Settings (UI)\" Search for \"exclude\", and then find the setting \"Files: Exclude\" Click \"Add Pattern\", and then enter a pattern that exists in the file names you want to exclude. Q: Why sometimes the extension failed to upgrade on Windows platform? A: This is because some files of the extension still being used. To resolve this issue, please follow below steps: Uninstall MV BASIC extension first. Close all VS Code and java processes through task manager. Manually remove the MV BASIC extension directory under user profile. For example, you may find MV BASIC extension version 1.6.0 in \"C:\\Users\\user_name.vscode\\extensions\\rocketsoftware.rocket-mvbasic-1.6.0\". Restart VS Code and install the latest extension. Q: Why isn\u2019t the debugging functionality working? It was working well before. A: This may be a result of the VS Code upgrade. In VS Code 1.79.x, the debugging functionality has some updates which impact our extension. If you encounter debugging issues, please try to downgrade VS Code to version 1.78.2 (on which the debugging functionality should work well). Please refer VS Code Compatibility for more details. Q: How can I exclude specific files from the explorer view? A: You can update the vscode settings file \u201c.vscode/settings.json\u201d to exclude files. For more details, please refer VS Code official online documentation.","title":"FAQ"},{"location":"usage/Folding/","text":"Code Folding The code folding feature can be used to improve code readability for statements containing large blocks of code. The following code snippet contains code blocks for the IF statement and the ON statement. By clicking on the code folding icon, large code blocks are folded according to the syntax of the current statement.","title":"Folding"},{"location":"usage/Folding/#code-folding","text":"The code folding feature can be used to improve code readability for statements containing large blocks of code. The following code snippet contains code blocks for the IF statement and the ON statement. By clicking on the code folding icon, large code blocks are folded according to the syntax of the current statement.","title":"Code Folding"},{"location":"usage/Formatting/","text":"Formatting Usage There are three ways to format a document: Document formatting: press F1 to open a command window and then enter \"Format Document\" to format the entire document. Range formatting: select a part of the code and then right-click the box and select \"Format Selection\" to format your selection. On typing formatting: open the VS Code settings page and search for \"format on type\". Select the Editor: Format On Type option. When this option is selected, the line of code you just finished editing will be formatted automatically after pressing Enter . The formatting related configuration file contains many formatting settings. The information below describes these settings: trimNewlines Trim the original multiple newlines to keep one blank line. Note: Not applicable for On Type Formatting. Type and Values boolean Example Before: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d CRT \u201cHI\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d CRT \u201cHI\u201d trimFinalNewlines Trim the final newlines down to one newline. Note: This option is dependent upon Visual Studio Code and will be subject to the Visual Studio Code\u2019s setting in future releases. Note: Not applicable for On Type Formatting. Type and Values boolean Example Before: CRT \u201cHELLO\u201d END </EOF> After: CRT \u201cHELLO\u201d END </EOF> trimTrailingWhitespace Trim the trailing white spaces of a line. Type and Values boolean Example Before: CRT \u201cHELLO\u201d</SPACE></SPACE></SPACE> After: CRT \u201cHELLO\u201d insertFinalNewline Insert a newline at the end of the file if one does not exist. Note: Not applicable for On Type Formatting. Type and Values boolean Example Before: CRT \u201cHELLO\u201d</EOF> After: CRT \u201cHELLO\u201d </EOF> multiStatementsOneLine Specify whether to allow multiple statements on the same line. Note: this option will not take effect for line clauses when clause.useBlock is false . To split statements in a line clause, set clause.useBlock to true . Note: Not applicable for On Type Formatting. Type and Values boolean Example 1 When clause.useBlock is set to false , and multiStatementsOneLine set to false . Before: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = FALSE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = FALSE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d Example 2 When clause.useBlock is set to true , and multiStatementsOneLine set to false . Before: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = TRUE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = TRUE THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END alignInlineComments Specify the column to which the inline comments are aligned when possible. Type and Values integer Example If it is set to 30 , Before: CRT \u201cHELLO\u201d ;* HELLO CRT \u201cWORLD\u201d ;* WORLD CRT \u201c!!\u201d ;* !! After: CRT \u201cHELLO\u201d ;* HELLO CRT \u201cWORLD\u201d ;* WORLD CRT \u201c!!\u201d ;* !! spacing.operator Specify the number of whitespaces around binary operators such as \u201c+\u201d, \u201d-\u201c, \u201d:\u201d, etc. Type and Values integer Example If it is set to 1 , Before: A = B+C A = B-C A = B:C After: A = B + C A = B \u2013 C A = B : C spacing.semicolon Specify the number of whitespaces after a semicolon delimiter between statements on the same line. Type and Values integer Example If it is set to 1 , Before: CRT \u201cHELLO\u201d;CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d spacing.comma Specify the number of whitespaces after a comma delimiter in a parameter list. Type and Values integer Example If it is set to 1 , Before: CALL SAY(HELLO,WORLD) After: CALL SAY(HELLO, WORLD) spacing.assignment Specify the number of whitespaces around assignment symbols such as \u201c=\u201d, \u201c+=\u201d, \u201c:=\u201d, etc Type and Values integer Example If it is set to 1 , Before: A=B A+=B A:=B After: A = B A += B A := B spacing.parentheses Specify the number of whitespaces after the open parentheses and before the close parentheses for a parameter list or matrix reference. Type and Values integer Example If it is set to 1 , Before: CALL SAY(HELLO, WORLD) After: CALL SAY( HELLO, WORLD ) spacing.squareBrackets Specify the number of whitespaces after the open square bracket and before the close square bracket for a parameter list or matrix reference. Type and Values integer Example If it is set to 1 , Before: PRINT A[\"#\", 4, 1] After: PRINT A[ \"#\", 4, 1 ] spacing.curlyBrackets Specify the number of whitespaces after the open curly bracket and before the close curly bracket for a parameter list or matrix reference. Type and Values integer Example If it is set to 1 , Before: CALL SAY{HELLO, WORLD} After: CALL SAY{ HELLO, WORLD } spacing.angleBrackets Specify the number of whitespaces after the open angle bracket and before the close angle bracket for dynamic arrays. Type and Values integer Example If it is set to 1 , Before: VALUE = DYNARRAY<1, 2> After: VALUE = DYNARRAY< 1, 2 > style.operator Specify whether to use a symbol or keyword for operators such as GT , LE . Type and Values string \u201c Symbol \u201d: use symbols such as >, <, # \u201c keyword \u201d: use keywords such as LT , GT , NE \u201c keep \u201d: keep the original form. Example If it is set to \u201c keyword \u201d, Before: IF A > B THEN CRT \u201cHELLO WORLD\u201d After: IF A GT B THEN CRT \u201cHELLO WORLD\u201d style.keyword Specify whether to use the full name or abbreviated name for keywords that support abbreviation. Type and Values string \u201c full \u201d: use full name such as EQUATE . \u201c abbr \u201d: use keyword such as EQU . \u201c keep \u201d: keep the original form. Example If it is set to \u201c abbr \u201d, Before: EQUATE HELLO LITERALLY \u201cHI\u201d After: EQU HELLO LIT \u201cHI\u201d style.commentMark Specify the style of comment mark. Type and Values string \u201c rem \u201d: use rem for as comment mark. \u201c*\u201d: use * as comment mark. \u201c!\u201d: use ! as comment mark. \u201c$ \u201d: use $ as comment mark. Example If it is set to \u201c rem \u201d, Before: * comment line A = B ;* inline comment After: REM comment line A = B ;REM inline comment style.keywordCase Specify the case for the keywords. Type and Values string \u201c uppercase \u201d: Use upper case for keywords like IF \u201c lowercase \u201d: use lower case for keywords such as if . \u201c titlecase \u201d: use title case for keywords such as If . \u201c keep \u201d: keep the original form. Example If it is set to lowercase , Before: IF A = B THEN CRT \u201cHello World\u201d END After: if A = B then crt \u201cHello World\u201d end indent.base Specify the number of TAB\u2019s to use as the base indentation for all statements except: Labels Directives (see indent.directive ) PROGRAM , SUBROUTINE , FUNCTION Statements END statements (not for block end) Comment (see indent.commentLine ) Type and Values integer Example With indent.base set to 1 and in Visual Studio Code, tabSize is set to 4, Before: SUBROUTINE GREETING(HI, NAME) CRT HI CRT NAME WELCOME: CRT \u201cWELCOME\u201d END After: SUBROUTINE GREETING(HI, NAME) CRT HI CRT NAME WELCOME: CRT \u201cWELCOME\u201d END indent.block Specify whether to indent statements in block clauses. The spaces for each level of indentation is configured by the tabSize in the Visual Studio Code. Types and Values boolean Example If it is set to true , Before: IF A = B THEN CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d END After: IF A = B THEN CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d END indent.commentLine Whether to indent comment lines as statements. If set to true , the comment line will be indented the same as the statement following the comment. Type and Values boolean Example If it is set to true , Before: * COMMENT LINE 1 IF A THEN * COMMENT LINE 2 CRT \u201cHI WORLD\u201d END After: * COMMENT LINE 1 IF A THEN * COMMENT LINE 2 CRT \u201cHI WORLD\u201d END indent.directive Specify whether to indent the directives as statements. Type and Values boolean Example If it is set to true , Before: $INCLUDE INC GREETING.H CRT \u2018HELLO\u2019 After: $INCLUDE INC GREETING.H CRT \u2018HELLO\u2019 indent.clause If a clause is starting at a new line, then this option controls whether to indent whole clause (including the clause keyword). Type and Values boolean Example If it is set to true , Before: OPEN FILENAME TO FILEVAR ON ERROR CRT \u201cERROR\u201d END THEN CRT \u201cGOOD\u201d END ELSE CRT \u201cBAD\u201d END After: OPEN FILENAME TO FILEVAR ON ERROR CRT \u201cERROR\u201d END THEN CRT \u201cGOOD\u201d END ELSE CRT \u201cBAD\u201d END clause.useBlock Specify to always use a block for clauses, Note: Not applicable for On Type Formatting. Type and Values boolean Example If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d; CRT \u201c WORLD\u201d; After: IF A = B THEN CRT \u201cHI\u201d; CRT \u201c WORLD\u201d END clause.addBlankLines For block clauses, always add a blank line before and after the block. Note: Not applicable for On Type Formatting Type and Values boolean Example If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d CRT \u201c WORLD\u201d END After: IF A = B THEN CRT \u201cHI\u201d CRT \u201c WORLD\u201d END clause.atNewline Specify to always ensure that clause keywords ( THEN/ELSE/LOCKED/ON ERROR ) start at a new line. Note: Not applicable for On Type Formatting. Type and Values boolean Example If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END After: IF A = B THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END routine.labelPattern Specify a pattern for labels. A Statement\u2019s indentation under these labels is the same as subroutines. For other statements, the indentation is the same as the main routine. Note : If this value is left empty, all statements under the labels use the same indentation as subroutines except for the first label. Type and Values string The pattern follows GLOB rule. Example If set to LABEL *, Before: MAIN: NULL RETURN LABEL1: NULL RETURN LABEL2: NULL RETURN FINAL: NULL RETURN After: MAIN: NULL RETURN LABEL1: NULL RETURN LABEL2: NULL RETURN FINAL: NULL RETURN","title":"Formatting"},{"location":"usage/Formatting/#formatting-usage","text":"There are three ways to format a document: Document formatting: press F1 to open a command window and then enter \"Format Document\" to format the entire document. Range formatting: select a part of the code and then right-click the box and select \"Format Selection\" to format your selection. On typing formatting: open the VS Code settings page and search for \"format on type\". Select the Editor: Format On Type option. When this option is selected, the line of code you just finished editing will be formatted automatically after pressing Enter . The formatting related configuration file contains many formatting settings. The information below describes these settings:","title":"Formatting Usage"},{"location":"usage/Formatting/#trimnewlines","text":"Trim the original multiple newlines to keep one blank line. Note: Not applicable for On Type Formatting.","title":"trimNewlines"},{"location":"usage/Formatting/#type-and-values","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example","text":"Before: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d CRT \u201cHI\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d CRT \u201cHI\u201d","title":"Example"},{"location":"usage/Formatting/#trimfinalnewlines","text":"Trim the final newlines down to one newline. Note: This option is dependent upon Visual Studio Code and will be subject to the Visual Studio Code\u2019s setting in future releases. Note: Not applicable for On Type Formatting.","title":"trimFinalNewlines"},{"location":"usage/Formatting/#type-and-values_1","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_1","text":"Before: CRT \u201cHELLO\u201d END </EOF> After: CRT \u201cHELLO\u201d END </EOF>","title":"Example"},{"location":"usage/Formatting/#trimtrailingwhitespace","text":"Trim the trailing white spaces of a line.","title":"trimTrailingWhitespace"},{"location":"usage/Formatting/#type-and-values_2","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_2","text":"Before: CRT \u201cHELLO\u201d</SPACE></SPACE></SPACE> After: CRT \u201cHELLO\u201d","title":"Example"},{"location":"usage/Formatting/#insertfinalnewline","text":"Insert a newline at the end of the file if one does not exist. Note: Not applicable for On Type Formatting.","title":"insertFinalNewline"},{"location":"usage/Formatting/#type-and-values_3","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_3","text":"Before: CRT \u201cHELLO\u201d</EOF> After: CRT \u201cHELLO\u201d </EOF>","title":"Example"},{"location":"usage/Formatting/#multistatementsoneline","text":"Specify whether to allow multiple statements on the same line. Note: this option will not take effect for line clauses when clause.useBlock is false . To split statements in a line clause, set clause.useBlock to true . Note: Not applicable for On Type Formatting.","title":"multiStatementsOneLine"},{"location":"usage/Formatting/#type-and-values_4","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example-1","text":"When clause.useBlock is set to false , and multiStatementsOneLine set to false . Before: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = FALSE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = FALSE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d","title":"Example 1"},{"location":"usage/Formatting/#example-2","text":"When clause.useBlock is set to true , and multiStatementsOneLine set to false . Before: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = TRUE THEN CRT \u201cHI\u201d; CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d IF CLAUSE.USEBLOCK = TRUE THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END","title":"Example 2"},{"location":"usage/Formatting/#aligninlinecomments","text":"Specify the column to which the inline comments are aligned when possible.","title":"alignInlineComments"},{"location":"usage/Formatting/#type-and-values_5","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_4","text":"If it is set to 30 , Before: CRT \u201cHELLO\u201d ;* HELLO CRT \u201cWORLD\u201d ;* WORLD CRT \u201c!!\u201d ;* !! After: CRT \u201cHELLO\u201d ;* HELLO CRT \u201cWORLD\u201d ;* WORLD CRT \u201c!!\u201d ;* !!","title":"Example"},{"location":"usage/Formatting/#spacingoperator","text":"Specify the number of whitespaces around binary operators such as \u201c+\u201d, \u201d-\u201c, \u201d:\u201d, etc.","title":"spacing.operator"},{"location":"usage/Formatting/#type-and-values_6","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_5","text":"If it is set to 1 , Before: A = B+C A = B-C A = B:C After: A = B + C A = B \u2013 C A = B : C","title":"Example"},{"location":"usage/Formatting/#spacingsemicolon","text":"Specify the number of whitespaces after a semicolon delimiter between statements on the same line.","title":"spacing.semicolon"},{"location":"usage/Formatting/#type-and-values_7","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_6","text":"If it is set to 1 , Before: CRT \u201cHELLO\u201d;CRT \u201cWORLD\u201d After: CRT \u201cHELLO\u201d; CRT \u201cWORLD\u201d","title":"Example"},{"location":"usage/Formatting/#spacingcomma","text":"Specify the number of whitespaces after a comma delimiter in a parameter list.","title":"spacing.comma"},{"location":"usage/Formatting/#type-and-values_8","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_7","text":"If it is set to 1 , Before: CALL SAY(HELLO,WORLD) After: CALL SAY(HELLO, WORLD)","title":"Example"},{"location":"usage/Formatting/#spacingassignment","text":"Specify the number of whitespaces around assignment symbols such as \u201c=\u201d, \u201c+=\u201d, \u201c:=\u201d, etc","title":"spacing.assignment"},{"location":"usage/Formatting/#type-and-values_9","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_8","text":"If it is set to 1 , Before: A=B A+=B A:=B After: A = B A += B A := B","title":"Example"},{"location":"usage/Formatting/#spacingparentheses","text":"Specify the number of whitespaces after the open parentheses and before the close parentheses for a parameter list or matrix reference.","title":"spacing.parentheses"},{"location":"usage/Formatting/#type-and-values_10","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_9","text":"If it is set to 1 , Before: CALL SAY(HELLO, WORLD) After: CALL SAY( HELLO, WORLD )","title":"Example"},{"location":"usage/Formatting/#spacingsquarebrackets","text":"Specify the number of whitespaces after the open square bracket and before the close square bracket for a parameter list or matrix reference.","title":"spacing.squareBrackets"},{"location":"usage/Formatting/#type-and-values_11","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_10","text":"If it is set to 1 , Before: PRINT A[\"#\", 4, 1] After: PRINT A[ \"#\", 4, 1 ]","title":"Example"},{"location":"usage/Formatting/#spacingcurlybrackets","text":"Specify the number of whitespaces after the open curly bracket and before the close curly bracket for a parameter list or matrix reference.","title":"spacing.curlyBrackets"},{"location":"usage/Formatting/#type-and-values_12","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_11","text":"If it is set to 1 , Before: CALL SAY{HELLO, WORLD} After: CALL SAY{ HELLO, WORLD }","title":"Example"},{"location":"usage/Formatting/#spacinganglebrackets","text":"Specify the number of whitespaces after the open angle bracket and before the close angle bracket for dynamic arrays.","title":"spacing.angleBrackets"},{"location":"usage/Formatting/#type-and-values_13","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_12","text":"If it is set to 1 , Before: VALUE = DYNARRAY<1, 2> After: VALUE = DYNARRAY< 1, 2 >","title":"Example"},{"location":"usage/Formatting/#styleoperator","text":"Specify whether to use a symbol or keyword for operators such as GT , LE .","title":"style.operator"},{"location":"usage/Formatting/#type-and-values_14","text":"string \u201c Symbol \u201d: use symbols such as >, <, # \u201c keyword \u201d: use keywords such as LT , GT , NE \u201c keep \u201d: keep the original form.","title":"Type and Values"},{"location":"usage/Formatting/#example_13","text":"If it is set to \u201c keyword \u201d, Before: IF A > B THEN CRT \u201cHELLO WORLD\u201d After: IF A GT B THEN CRT \u201cHELLO WORLD\u201d","title":"Example"},{"location":"usage/Formatting/#stylekeyword","text":"Specify whether to use the full name or abbreviated name for keywords that support abbreviation.","title":"style.keyword"},{"location":"usage/Formatting/#type-and-values_15","text":"string \u201c full \u201d: use full name such as EQUATE . \u201c abbr \u201d: use keyword such as EQU . \u201c keep \u201d: keep the original form.","title":"Type and Values"},{"location":"usage/Formatting/#example_14","text":"If it is set to \u201c abbr \u201d, Before: EQUATE HELLO LITERALLY \u201cHI\u201d After: EQU HELLO LIT \u201cHI\u201d","title":"Example"},{"location":"usage/Formatting/#stylecommentmark","text":"Specify the style of comment mark.","title":"style.commentMark"},{"location":"usage/Formatting/#type-and-values_16","text":"string \u201c rem \u201d: use rem for as comment mark. \u201c*\u201d: use * as comment mark. \u201c!\u201d: use ! as comment mark. \u201c$ \u201d: use $ as comment mark.","title":"Type and Values"},{"location":"usage/Formatting/#example_15","text":"If it is set to \u201c rem \u201d, Before: * comment line A = B ;* inline comment After: REM comment line A = B ;REM inline comment","title":"Example"},{"location":"usage/Formatting/#stylekeywordcase","text":"Specify the case for the keywords.","title":"style.keywordCase"},{"location":"usage/Formatting/#type-and-values_17","text":"string \u201c uppercase \u201d: Use upper case for keywords like IF \u201c lowercase \u201d: use lower case for keywords such as if . \u201c titlecase \u201d: use title case for keywords such as If . \u201c keep \u201d: keep the original form.","title":"Type and Values"},{"location":"usage/Formatting/#example_16","text":"If it is set to lowercase , Before: IF A = B THEN CRT \u201cHello World\u201d END After: if A = B then crt \u201cHello World\u201d end","title":"Example"},{"location":"usage/Formatting/#indentbase","text":"Specify the number of TAB\u2019s to use as the base indentation for all statements except: Labels Directives (see indent.directive ) PROGRAM , SUBROUTINE , FUNCTION Statements END statements (not for block end) Comment (see indent.commentLine )","title":"indent.base"},{"location":"usage/Formatting/#type-and-values_18","text":"integer","title":"Type and Values"},{"location":"usage/Formatting/#example_17","text":"With indent.base set to 1 and in Visual Studio Code, tabSize is set to 4, Before: SUBROUTINE GREETING(HI, NAME) CRT HI CRT NAME WELCOME: CRT \u201cWELCOME\u201d END After: SUBROUTINE GREETING(HI, NAME) CRT HI CRT NAME WELCOME: CRT \u201cWELCOME\u201d END","title":"Example"},{"location":"usage/Formatting/#indentblock","text":"Specify whether to indent statements in block clauses. The spaces for each level of indentation is configured by the tabSize in the Visual Studio Code.","title":"indent.block"},{"location":"usage/Formatting/#types-and-values","text":"boolean","title":"Types and Values"},{"location":"usage/Formatting/#example_18","text":"If it is set to true , Before: IF A = B THEN CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d END After: IF A = B THEN CRT \u201cHELLO\u201d CRT \u201cWORLD\u201d END","title":"Example"},{"location":"usage/Formatting/#indentcommentline","text":"Whether to indent comment lines as statements. If set to true , the comment line will be indented the same as the statement following the comment.","title":"indent.commentLine"},{"location":"usage/Formatting/#type-and-values_19","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_19","text":"If it is set to true , Before: * COMMENT LINE 1 IF A THEN * COMMENT LINE 2 CRT \u201cHI WORLD\u201d END After: * COMMENT LINE 1 IF A THEN * COMMENT LINE 2 CRT \u201cHI WORLD\u201d END","title":"Example"},{"location":"usage/Formatting/#indentdirective","text":"Specify whether to indent the directives as statements.","title":"indent.directive"},{"location":"usage/Formatting/#type-and-values_20","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_20","text":"If it is set to true , Before: $INCLUDE INC GREETING.H CRT \u2018HELLO\u2019 After: $INCLUDE INC GREETING.H CRT \u2018HELLO\u2019","title":"Example"},{"location":"usage/Formatting/#indentclause","text":"If a clause is starting at a new line, then this option controls whether to indent whole clause (including the clause keyword).","title":"indent.clause"},{"location":"usage/Formatting/#type-and-values_21","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_21","text":"If it is set to true , Before: OPEN FILENAME TO FILEVAR ON ERROR CRT \u201cERROR\u201d END THEN CRT \u201cGOOD\u201d END ELSE CRT \u201cBAD\u201d END After: OPEN FILENAME TO FILEVAR ON ERROR CRT \u201cERROR\u201d END THEN CRT \u201cGOOD\u201d END ELSE CRT \u201cBAD\u201d END","title":"Example"},{"location":"usage/Formatting/#clauseuseblock","text":"Specify to always use a block for clauses, Note: Not applicable for On Type Formatting.","title":"clause.useBlock"},{"location":"usage/Formatting/#type-and-values_22","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_22","text":"If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d; CRT \u201c WORLD\u201d; After: IF A = B THEN CRT \u201cHI\u201d; CRT \u201c WORLD\u201d END","title":"Example"},{"location":"usage/Formatting/#clauseaddblanklines","text":"For block clauses, always add a blank line before and after the block. Note: Not applicable for On Type Formatting","title":"clause.addBlankLines"},{"location":"usage/Formatting/#type-and-values_23","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_23","text":"If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d CRT \u201c WORLD\u201d END After: IF A = B THEN CRT \u201cHI\u201d CRT \u201c WORLD\u201d END","title":"Example"},{"location":"usage/Formatting/#clauseatnewline","text":"Specify to always ensure that clause keywords ( THEN/ELSE/LOCKED/ON ERROR ) start at a new line. Note: Not applicable for On Type Formatting.","title":"clause.atNewline"},{"location":"usage/Formatting/#type-and-values_24","text":"boolean","title":"Type and Values"},{"location":"usage/Formatting/#example_24","text":"If it is set to true , Before: IF A = B THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END After: IF A = B THEN CRT \u201cHI\u201d CRT \u201cWORLD\u201d END","title":"Example"},{"location":"usage/Formatting/#routinelabelpattern","text":"Specify a pattern for labels. A Statement\u2019s indentation under these labels is the same as subroutines. For other statements, the indentation is the same as the main routine. Note : If this value is left empty, all statements under the labels use the same indentation as subroutines except for the first label.","title":"routine.labelPattern"},{"location":"usage/Formatting/#type-and-values_25","text":"string The pattern follows GLOB rule.","title":"Type and Values"},{"location":"usage/Formatting/#example_25","text":"If set to LABEL *, Before: MAIN: NULL RETURN LABEL1: NULL RETURN LABEL2: NULL RETURN FINAL: NULL RETURN After: MAIN: NULL RETURN LABEL1: NULL RETURN LABEL2: NULL RETURN FINAL: NULL RETURN","title":"Example"},{"location":"usage/GaraSign/","text":"GaraSign - Code Signing GaraSign is Rocket's new tool for code signing and verifying the detached signatures. Please follow the steps below: Verify Command openssl dgst -verify <public key file> -signature <signature> <file to verify> Below is detailed information on how to execute the verify command: Extract the signature file and public key files from the 'rocket-mvbasic-2.5.1_sign.zip' zip file. Unzip the 'rocket-mvbasic-2.5.1_sign.zip' zip file and execute the commands below for verification: ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature rocket-mvbasic-2.5.1.vsix.sig rocket-mvbasic-2.5.1.vsix Verified OK ``` ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature uvdap-uv1421-linux.tar.gz.sig uvdap-uv1421-linux.tar.gz Verified OK ``` ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature uvdap-uv1421-windows.zip.sig uvdap-uv1421-windows.zip Verified OK ``` Failed use cases: ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature rocket-mvbasic-2.5.1.vsix.sig rocket-mvbasic-2.5.1.vsix Verification Failure ```","title":"GaraSign"},{"location":"usage/GaraSign/#garasign-code-signing","text":"GaraSign is Rocket's new tool for code signing and verifying the detached signatures. Please follow the steps below:","title":"GaraSign - Code Signing"},{"location":"usage/GaraSign/#verify-command","text":"openssl dgst -verify <public key file> -signature <signature> <file to verify>","title":"Verify Command"},{"location":"usage/GaraSign/#below-is-detailed-information-on-how-to-execute-the-verify-command","text":"Extract the signature file and public key files from the 'rocket-mvbasic-2.5.1_sign.zip' zip file. Unzip the 'rocket-mvbasic-2.5.1_sign.zip' zip file and execute the commands below for verification: ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature rocket-mvbasic-2.5.1.vsix.sig rocket-mvbasic-2.5.1.vsix Verified OK ``` ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature uvdap-uv1421-linux.tar.gz.sig uvdap-uv1421-linux.tar.gz Verified OK ``` ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature uvdap-uv1421-windows.zip.sig uvdap-uv1421-windows.zip Verified OK ``` Failed use cases: ```bash openssl dgst -verify rocket_mv.pem.pub.key -signature rocket-mvbasic-2.5.1.vsix.sig rocket-mvbasic-2.5.1.vsix Verification Failure ```","title":"Below is detailed information on how to execute the verify command:"},{"location":"usage/GroupView/","text":"Using Auto Group View Introduction The auto-group view function is used to combine files that have similar names into groups. This allows you to organize file lists with more concise groupings. You can also customize group content and hide unnecessary files. Configuration In each workspace folder, you can specify source code directories and add customized groups by modifying the configuration file groupView.mvbasic.json . If no customized groups are added, a default rule will be used instead. Note that this default rule can also be changed. If a source code directory is not specified, the current opened folder will be used as the source code directory. Folders will not be displayed in the group view unless they are specified as source directories. Group view related settings are set from the \"groupView\" section of the configuration file. If you make changes to the configuration file, refresh the group view to make the change take effect. Ignore files list You can specify which files to ignore (not be displayed in the group view) from the \"ignore\" section in \"groupView\". Here is a sample configuration: \"ignore\": [ \"VOC\", \"D_*\", \"BP/SAMPLE\" ] The following file specification methods can be used in the \"ignore\" section: File names: for example, \"VOC\", \"D_VOC\". Using the wildcard character: for example, \"D* \" specifies that all files that start with \"D \" in the current directory will be ignored. Using a relative path: for example, if the current opened folder is \"C:\\U2\\UV\\XDEMO\", then \"BP/SAMPLE\" specifies that \"C:\\U2\\UV\\XDEMO\\BP\\SAMPLE\" will not be displayed in the group view. Note that in this example, \"BP\" should be configured as the source code folder. Default auto-group rule If you do not add customized groups in the configuration file, the auto-group view function will use a default rule to organize the files and create groups in current opened folder. Here is the default configuration: \"default\": { \"delimiter\": \".\", \"level\": 2 } delimiter specifies the character(s) to use to separate the file names. For example, if specifying the \".\" delimiter, the file \"SAMPLE.BASIC.PROGRAM\" is separated to 3 parts: \"SAMPLE\", \"BASIC\" and \"PROGRAM\". Both single character and multiple character delimiters are supported in \"delimiter\", but for readability, we recommend using only single character. level specifies how to combine group names based on the separated parts of the file names. For example, there are three files: \"SAMPLE.BASIC.FILE\", \"SAMPLE.BASIC.CODE\" and \"SAMPLE.BASIC.PROGRAM\". These three files all have a uniform file name format in the first two parts of the files: \"SAMPLE.BASIC\". These can be placed into one group. If \"level\" is set to 2, then these will be placed into the group \"SAMPLE.BASIC\". If \"level\" is set to 1, then these will be placed into the group \"SAMPLE\". As you can see, \"level\" specifies that the default group name contains the number of the same parts in file names. If \"level\" is set to an invalid number (for example, -1), then default value of 2 is used instead. Files that do not have similar name formats will not be placed into any groups. Source directories and customized groups In the groups section, you can add source code directories and customize groups. Here is a sample configuration: \"groups\": [ { \"sourceDir\": \"PARENT/BP\" } ] You can add a source code folder by adding an element in groups . Use sourceDir to specify the source code folder name or a relative path. Multiple source code folders can be specified. If no source code folder is specified, or if there is only one source code folder configured, the source code folder name will be omitted. If there are no customized groups in the source code folder, the default rule will be applied. Here is a sample configuration for adding customized groups: \"groups\": [ { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.*\" ], \"exclude\": [ \"SAMPLE.BASIC.CODE\" ] } ] groupName specifies the customized group name. include specifies which files will be included in this group. exclude specifies which files should be excluded from this group. Note that when files are excluded from a group, they can alternatively be placed into other groups. If you need to add multiple groups into one source code folder, add multiple element items in groups . For example: \"groups\": [ { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.*\" ], \"exclude\": [ \"SAMPLE.BASIC.CODE\" ] }, { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE2\", \"include\": [ \"TEST.*\" ] } ] In this example, two customized groups (SAMPLE, SAMPLE2) are added to the source code folder \"PARENT/BP\". Note : one file can only be placed into one group. This means that if you were to specify that a file be included in multiple different groups, it would only be added to the first specified group. Multiple workspace folders support If there are multiple workspace folders, workspace folder names will be displayed in the group view, and group view configuration files for each workspace folders are separated. Please refer to Exmaple 4 for more details. Examples The samples below illustrate how to configure the auto-group view function. Example 1 In this example, the default rule\u2019s delimiter is changed from \".\" to \"_\". The directory structure of the opened folder is: DEMO/ |- SAMPLE_BASIC_FILE_1 |- SAMPLE_BASIC_FILE_2 |- SAMPLE_BASIC_FILE_3 |- SAMPLE_MENU_FILE_1 |- SAMPLE_MENU_FILE_2 |- SAMPLE_FILE |- SAMPLE.CODE The configuration for group view is: \"groupView\": { \"default\": { \"delimiter\": \"_\", \"level\": 2 } } In the auto-group result, files with names that contain \"_\" will be grouped automatically. The result is shown below: SAMPLE_BASIC |- SAMPLE_BASIC_FILE_1 |- SAMPLE_BASIC_FILE_2 |- SAMPLE_BASIC_FILE_3 | SAMPLE_MENU |- SAMPLE_MENU_FILE_1 |- SAMPLE_MENU_FILE_2 | SAMPLE.CODE SAMPLE_FILE Example 2 In this example, a source code directory and a customized group are specified in the settings. The directory structure of the opened folder is: DEMO/ |- BP1/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 | |- BP2/ | |- SAMPLE.BASIC.FILE | |- SAMPLE.FILE Below is the configuration file content: \"groupView\": { \"default\": { \"delimiter\": \".\", \"level\": 2 }, \"groups\": [ { \"sourceDir\": \"BP1\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.BASIC.*\" ] } ] } In the auto-group result below, groups will be displayed, but the source code folder \"BP1\" will not. \"SAMPLE\" group is a customized group, and \"SAMPLE.CODE\" is generated based on the default auto-group rule. SAMPLE |- SAMPLE.BASIC.FILE_1 |- SAMPLE.BASIC.FILE_2 | SAMPLE.CODE |- SAMPLE.CODE.FILE_1 |- SAMPLE.CODE.FILE_2 Example 3 In this example, there are multiple source code directories and customized groups. The directory structure of opened folder is: DEMO/ |- BP1/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 | |- BP2/ | |- SAMPLE.CODE.FILE_3 | |- SAMPLE.CODE.FILE_4 | |- SAMPLE.FILE The configuration for group view is: \"groupView\": { \"ignore\": [ ], \"default\": { \"delimiter\": \".\", \"level\": 2 }, \"groups\": [ { \"sourceDir\": \"BP1\", \"groupName\": \"BASIC\", \"include\": [ \"SAMPLE.BASIC.*\" ] }, { \"sourceDir\": \"BP1\", \"groupName\": \"CODE\", \"include\": [ \"SAMPLE.CODE.*\" ] }, { \"sourceDir\": \"BP2\" } ] } In the configuration file, there are different groups which are filled with different elements of the \"groups\" section. The auto-group result is shown below: BP1 |- BASIC | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- CODE |- SAMPLE.CODE.FILE_1 |- SAMPLE.CODE.FILE_2 BP2 |- SAMPLE.CODE |- SAMPLE.CODE.FILE_3 |- SAMPLE.CODE.FILE_4 Example 4 In this example, there are three workspace folders, and each workspace folder has different group view settings. The directory structure of the opened folder is: DEMO1/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO2/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO3/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 The group view configuration in the workspace folder DEMO1 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"sourceDir\": \"BP\" } ] } The group view configuration in the workspace folder DEMO2 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"groupName\": \"ALL\", \"sourceDir\": \"BP\", \"include\": [ \"*.*\" ] } ] } The group view configuration in the workspace folder DEMO3 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"groupName\": \"BASIC\", \"sourceDir\": \"BP\", \"include\": [ \"SAMPLE.BASIC.*\" ] } ] } The group view would be: DEMO1/ |- SAMPLE.BASIC/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 |- SAMPLE.CODE/ | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO2/ |- ALL/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO3/ |- BASIC/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 |- SAMPLE.CODE/ | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2","title":"Group View"},{"location":"usage/GroupView/#using-auto-group-view","text":"","title":"Using Auto Group View"},{"location":"usage/GroupView/#introduction","text":"The auto-group view function is used to combine files that have similar names into groups. This allows you to organize file lists with more concise groupings. You can also customize group content and hide unnecessary files.","title":"Introduction"},{"location":"usage/GroupView/#configuration","text":"In each workspace folder, you can specify source code directories and add customized groups by modifying the configuration file groupView.mvbasic.json . If no customized groups are added, a default rule will be used instead. Note that this default rule can also be changed. If a source code directory is not specified, the current opened folder will be used as the source code directory. Folders will not be displayed in the group view unless they are specified as source directories. Group view related settings are set from the \"groupView\" section of the configuration file. If you make changes to the configuration file, refresh the group view to make the change take effect.","title":"Configuration"},{"location":"usage/GroupView/#ignore-files-list","text":"You can specify which files to ignore (not be displayed in the group view) from the \"ignore\" section in \"groupView\". Here is a sample configuration: \"ignore\": [ \"VOC\", \"D_*\", \"BP/SAMPLE\" ] The following file specification methods can be used in the \"ignore\" section: File names: for example, \"VOC\", \"D_VOC\". Using the wildcard character: for example, \"D* \" specifies that all files that start with \"D \" in the current directory will be ignored. Using a relative path: for example, if the current opened folder is \"C:\\U2\\UV\\XDEMO\", then \"BP/SAMPLE\" specifies that \"C:\\U2\\UV\\XDEMO\\BP\\SAMPLE\" will not be displayed in the group view. Note that in this example, \"BP\" should be configured as the source code folder.","title":"Ignore files list"},{"location":"usage/GroupView/#default-auto-group-rule","text":"If you do not add customized groups in the configuration file, the auto-group view function will use a default rule to organize the files and create groups in current opened folder. Here is the default configuration: \"default\": { \"delimiter\": \".\", \"level\": 2 } delimiter specifies the character(s) to use to separate the file names. For example, if specifying the \".\" delimiter, the file \"SAMPLE.BASIC.PROGRAM\" is separated to 3 parts: \"SAMPLE\", \"BASIC\" and \"PROGRAM\". Both single character and multiple character delimiters are supported in \"delimiter\", but for readability, we recommend using only single character. level specifies how to combine group names based on the separated parts of the file names. For example, there are three files: \"SAMPLE.BASIC.FILE\", \"SAMPLE.BASIC.CODE\" and \"SAMPLE.BASIC.PROGRAM\". These three files all have a uniform file name format in the first two parts of the files: \"SAMPLE.BASIC\". These can be placed into one group. If \"level\" is set to 2, then these will be placed into the group \"SAMPLE.BASIC\". If \"level\" is set to 1, then these will be placed into the group \"SAMPLE\". As you can see, \"level\" specifies that the default group name contains the number of the same parts in file names. If \"level\" is set to an invalid number (for example, -1), then default value of 2 is used instead. Files that do not have similar name formats will not be placed into any groups.","title":"Default auto-group rule"},{"location":"usage/GroupView/#source-directories-and-customized-groups","text":"In the groups section, you can add source code directories and customize groups. Here is a sample configuration: \"groups\": [ { \"sourceDir\": \"PARENT/BP\" } ] You can add a source code folder by adding an element in groups . Use sourceDir to specify the source code folder name or a relative path. Multiple source code folders can be specified. If no source code folder is specified, or if there is only one source code folder configured, the source code folder name will be omitted. If there are no customized groups in the source code folder, the default rule will be applied. Here is a sample configuration for adding customized groups: \"groups\": [ { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.*\" ], \"exclude\": [ \"SAMPLE.BASIC.CODE\" ] } ] groupName specifies the customized group name. include specifies which files will be included in this group. exclude specifies which files should be excluded from this group. Note that when files are excluded from a group, they can alternatively be placed into other groups. If you need to add multiple groups into one source code folder, add multiple element items in groups . For example: \"groups\": [ { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.*\" ], \"exclude\": [ \"SAMPLE.BASIC.CODE\" ] }, { \"sourceDir\": \"PARENT/BP\", \"groupName\": \"SAMPLE2\", \"include\": [ \"TEST.*\" ] } ] In this example, two customized groups (SAMPLE, SAMPLE2) are added to the source code folder \"PARENT/BP\". Note : one file can only be placed into one group. This means that if you were to specify that a file be included in multiple different groups, it would only be added to the first specified group.","title":"Source directories and customized groups"},{"location":"usage/GroupView/#multiple-workspace-folders-support","text":"If there are multiple workspace folders, workspace folder names will be displayed in the group view, and group view configuration files for each workspace folders are separated. Please refer to Exmaple 4 for more details.","title":"Multiple workspace folders support"},{"location":"usage/GroupView/#examples","text":"The samples below illustrate how to configure the auto-group view function.","title":"Examples"},{"location":"usage/GroupView/#example-1","text":"In this example, the default rule\u2019s delimiter is changed from \".\" to \"_\". The directory structure of the opened folder is: DEMO/ |- SAMPLE_BASIC_FILE_1 |- SAMPLE_BASIC_FILE_2 |- SAMPLE_BASIC_FILE_3 |- SAMPLE_MENU_FILE_1 |- SAMPLE_MENU_FILE_2 |- SAMPLE_FILE |- SAMPLE.CODE The configuration for group view is: \"groupView\": { \"default\": { \"delimiter\": \"_\", \"level\": 2 } } In the auto-group result, files with names that contain \"_\" will be grouped automatically. The result is shown below: SAMPLE_BASIC |- SAMPLE_BASIC_FILE_1 |- SAMPLE_BASIC_FILE_2 |- SAMPLE_BASIC_FILE_3 | SAMPLE_MENU |- SAMPLE_MENU_FILE_1 |- SAMPLE_MENU_FILE_2 | SAMPLE.CODE SAMPLE_FILE","title":"Example 1"},{"location":"usage/GroupView/#example-2","text":"In this example, a source code directory and a customized group are specified in the settings. The directory structure of the opened folder is: DEMO/ |- BP1/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 | |- BP2/ | |- SAMPLE.BASIC.FILE | |- SAMPLE.FILE Below is the configuration file content: \"groupView\": { \"default\": { \"delimiter\": \".\", \"level\": 2 }, \"groups\": [ { \"sourceDir\": \"BP1\", \"groupName\": \"SAMPLE\", \"include\": [ \"SAMPLE.BASIC.*\" ] } ] } In the auto-group result below, groups will be displayed, but the source code folder \"BP1\" will not. \"SAMPLE\" group is a customized group, and \"SAMPLE.CODE\" is generated based on the default auto-group rule. SAMPLE |- SAMPLE.BASIC.FILE_1 |- SAMPLE.BASIC.FILE_2 | SAMPLE.CODE |- SAMPLE.CODE.FILE_1 |- SAMPLE.CODE.FILE_2","title":"Example 2"},{"location":"usage/GroupView/#example-3","text":"In this example, there are multiple source code directories and customized groups. The directory structure of opened folder is: DEMO/ |- BP1/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 | |- BP2/ | |- SAMPLE.CODE.FILE_3 | |- SAMPLE.CODE.FILE_4 | |- SAMPLE.FILE The configuration for group view is: \"groupView\": { \"ignore\": [ ], \"default\": { \"delimiter\": \".\", \"level\": 2 }, \"groups\": [ { \"sourceDir\": \"BP1\", \"groupName\": \"BASIC\", \"include\": [ \"SAMPLE.BASIC.*\" ] }, { \"sourceDir\": \"BP1\", \"groupName\": \"CODE\", \"include\": [ \"SAMPLE.CODE.*\" ] }, { \"sourceDir\": \"BP2\" } ] } In the configuration file, there are different groups which are filled with different elements of the \"groups\" section. The auto-group result is shown below: BP1 |- BASIC | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- CODE |- SAMPLE.CODE.FILE_1 |- SAMPLE.CODE.FILE_2 BP2 |- SAMPLE.CODE |- SAMPLE.CODE.FILE_3 |- SAMPLE.CODE.FILE_4","title":"Example 3"},{"location":"usage/GroupView/#example-4","text":"In this example, there are three workspace folders, and each workspace folder has different group view settings. The directory structure of the opened folder is: DEMO1/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO2/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO3/ |- BP/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 The group view configuration in the workspace folder DEMO1 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"sourceDir\": \"BP\" } ] } The group view configuration in the workspace folder DEMO2 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"groupName\": \"ALL\", \"sourceDir\": \"BP\", \"include\": [ \"*.*\" ] } ] } The group view configuration in the workspace folder DEMO3 is illustrated below: \"groupView\": { \"ignore\": [ \".rmv\" ], \"default\": { \"delimiter\": \".\", \"level\": \"2\" }, \"groups\": [ { \"groupName\": \"BASIC\", \"sourceDir\": \"BP\", \"include\": [ \"SAMPLE.BASIC.*\" ] } ] } The group view would be: DEMO1/ |- SAMPLE.BASIC/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 |- SAMPLE.CODE/ | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO2/ |- ALL/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2 DEMO3/ |- BASIC/ | |- SAMPLE.BASIC.FILE_1 | |- SAMPLE.BASIC.FILE_2 |- SAMPLE.CODE/ | |- SAMPLE.CODE.FILE_1 | |- SAMPLE.CODE.FILE_2","title":"Example 4"},{"location":"usage/Hover/","text":"Hover Usage Hover your mouse pointer over a BASIC statement or a keyword to see its brief description. You can add customized descriptions to user defined functions, subroutines, or labels. Please refer to Customized Documentation for more details.","title":"Hover"},{"location":"usage/Hover/#hover-usage","text":"Hover your mouse pointer over a BASIC statement or a keyword to see its brief description. You can add customized descriptions to user defined functions, subroutines, or labels. Please refer to Customized Documentation for more details.","title":"Hover Usage"},{"location":"usage/Include/","text":"Include Settings When a BASIC program includes some other files by using the INCLUDE statement, you can update the \"includeMapping\" setting in the configuration file so that the included file is referenced correctly. Please refer to Configuration for information on opening database related configuration files. \"includeMapping\": [ { \"includeFile\": \"\", \"account\": \"\", \"fileName\": \"\" } ] includeFile : the file name in the INCLUDE statement. account : account folder name. Please refer to Accounts settings to add account folders. fileName : file folder name. The file folder should contain BASIC programs. Examples Here are some examples to configure \"includeMapping\". Example 1 Map folder \"BP\" in current account folder as \"MAP_INC\". BASIC statement may like: $INCLUDE MAP_INC HEADER_NAME The configuration is: \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"fileName\": \"BP\" } ] Example 2 If BASIC program includes file from another folder, for example, map \"BP\" in account \"DEMO\" as \"MAP_INC\", then the configuration is: \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"account\": \"DEMO\", \"fileName\": \"BP\" } ] Example 3 Add multiple items in \"includeMapping\". \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"fileName\": \"BP\" }, { \"includeFile\": \"MAP_ANOTHER_INC\", \"account\": \"DEMO\", \"fileName\": \"BP\" } ]","title":"INCLUDE settings"},{"location":"usage/Include/#include-settings","text":"When a BASIC program includes some other files by using the INCLUDE statement, you can update the \"includeMapping\" setting in the configuration file so that the included file is referenced correctly. Please refer to Configuration for information on opening database related configuration files. \"includeMapping\": [ { \"includeFile\": \"\", \"account\": \"\", \"fileName\": \"\" } ] includeFile : the file name in the INCLUDE statement. account : account folder name. Please refer to Accounts settings to add account folders. fileName : file folder name. The file folder should contain BASIC programs.","title":"Include Settings"},{"location":"usage/Include/#examples","text":"Here are some examples to configure \"includeMapping\". Example 1 Map folder \"BP\" in current account folder as \"MAP_INC\". BASIC statement may like: $INCLUDE MAP_INC HEADER_NAME The configuration is: \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"fileName\": \"BP\" } ] Example 2 If BASIC program includes file from another folder, for example, map \"BP\" in account \"DEMO\" as \"MAP_INC\", then the configuration is: \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"account\": \"DEMO\", \"fileName\": \"BP\" } ] Example 3 Add multiple items in \"includeMapping\". \"includeMapping\": [ { \"includeFile\": \"MAP_INC\", \"fileName\": \"BP\" }, { \"includeFile\": \"MAP_ANOTHER_INC\", \"account\": \"DEMO\", \"fileName\": \"BP\" } ]","title":"Examples"},{"location":"usage/KnownIssues/","text":"Known Issues For 2.7.0 release MVVS Tech Note for Release 2.7.0 For 2.6.0 release MVVS Tech Note for Release 2.6.0","title":"Known Issues"},{"location":"usage/KnownIssues/#known-issues","text":"","title":"Known Issues"},{"location":"usage/KnownIssues/#for-270-release","text":"MVVS Tech Note for Release 2.7.0","title":"For 2.7.0 release"},{"location":"usage/KnownIssues/#for-260-release","text":"MVVS Tech Note for Release 2.6.0","title":"For 2.6.0 release"},{"location":"usage/Logging/","text":"Log Log location Console: From the Console, select \"View\" > \"Output\" and then from the OUTPUT panel, select \"Rocket MV BASIC Language Server\" from the Tasks drop-down. Note : If there is no warning or above level logs generated, then there is no Console output. Log file: .rmv\\logs\\rocket_mv_basic_language_server.log Log config Config file location: .rmv\\config\\log4j2.properties The Extension uses the log4j2 component. If you already know log4j2, it will be easy to configure the log. You can find related settings in log4j2 official online documentation here: https://logging.apache.org/log4j/2.x/manual/configuration.html . The following are brief description of commonly used options for your reference. property In most cases, you will only need to change these properties: property.ROOT_LEVEL: Used to configure the \"rootLogger.level\". Logger levels include Trace,Debug, Info, Warn, Error, and Fatal. Only logs with levels higher than or equal to the configured level will be available. Root logger level is the first filter. Console or file level is the second filter, only logs that meet both conditions will be printed. Recommended value is \"Info\". property.CONSOLE_LEVEL: Used to configure the \"appender.console.filter.threshold.level\". Limits the log level of output to the console. Recommended value is \"Warn\". property.FILE_LEVEL: Used to configure the \"appender.all.filter.threshold.level\". Limits the log level of output to the file. Recommended value is \"trace\". property.SERVER_NAME: Used to configure the log output file name. We recommend that this value not be changed. Recommended value is \"rocket_mv_basic_language_server\". property.LOG_HOME: Used to configure the log output file home path. Recommended value is \".rmv/logs\". global configuration status: The level of internal Log4j events that should be logged to the console. We recommend that this value not be changed. Recommended value is \"error\". monitorInterval: The minimum amount of time, in seconds, before the file configuration is checked for changes. Recommended value is \"5\" seconds. rootLogger Set the rootLogger level and where to place the log file. In addition, you can create appender refs for the logger . rootLogger.level: logger level. Recommended value is \"Info\" rootLogger.appenderRef.console.ref: This value is identical to the value of appender.console.name. We recommend that this value not be changed. Recommended value is \"ConsoleAll\". rootLogger.appenderRef.all.ref: This value is identical to the value of appender.file.name. We recommend that this value not be changed. Recommended value is \"RollingFileAll\". appender.console Appender used to define output to the console: appender.console.type: Suggest not to change. Recommended value is \"Console\". appender.console.name: Suggest not to change. Recommended value is \"ConsoleAll\". appender.console.target: SYSTEM_OUT or SYSTEM_ERR, please only use SYSTEM_ERR here. Because SYSTEM_OUT may cause unexpected error. appender.console.layout.type: Includes \"JSONLayout\", \"HTMLLayout\", \"YMLLayout\" and so on. Recommended value is PatternLayout. Recommended value is \"PatternLayout\". appender.console.layout.pattern: output format. Recommended value is \"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\" appender.console.filter.threshold.level: Refer to \"property.CONSOLE_LEVEL\". Suggest not to change, \"${CONSOLE_LEVEL}\". appender.console.filter.threshold.type: Includes \"StringMatchFilter\", \"LevelRangFilter\",\"RegexFilter\" and so on. Recommended value is \"ThresholdFilter\", output log information when log level >= CONSOLE_LEVEL appender.file Appender used to define output to the file appender.file.type: Suggest not to change. Recommended value is \"RollingFile\". appender.file.name: Suggest not to change. Recommended value is \"RollingFileAll\". appender.file.filter.threshold.level: Refer to \"property.FILE_LEVEL\". Fixed value, \"${FILE_LEVEL}\". appender.file.filter.threshold.type: Refer to \"appender.console.filter.threshold.type\". appender.file.fileName: Log file absolute path. Recommended value is \"${LOG_HOME}/${SERVER_NAME}.log\" appender.file.filePattern: file name format. Don't delete \"%i\" because it is related to \"DefaultRolloverStrategy\" (unless modify \"DefaultRolloverStrategy\" to another strategy). Recommended value is \"${LOG_HOME}/backup/${SERVER_NAME}.%d{yyyy-MM-dd}-%i.log\". appender.file.layout.type: Refer to \"appender.console.layout.type\". appender.file.layout.pattern: output format. Recommended value is \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\". appender.file.policies.type: Specifies a strategy for scrolling logs. Fixed value, \"Policies\". appender.file.policies.time.type: Child of Policies with value fixed to \"TimeBasedTriggeringPolicy\". Time-based rolling strategy. appender.file.policies.time.interval: Recommended value is \"1\". appender.file.policies.time.modulate: Indicates whether to adjust the time interval so that the next rollover occurs at the interval boundary. Recommended value is \"true\". appender.file.policies.size.type: Child of Policies with a fixed value of \"SizeBasedTriggeringPolicy\". The scroll policy based on file size. appender.file.policies.size.size: Policies define the size of each log file. The size can be specified in bytes, suffixed with KB, MB, or GB. Recommended value is \"10M\". appender.file.strategy.type: Suggest not to change, \"DefaultRolloverStrategy\". Used to specify the maximum number of log files that can exist in the same folder before the oldest log files are deleted allowing new log files to be created (via the max attribute). The default is to keep a maximum of seven files in backup file path. Examples Example 1 To set the log file level output to info level or higher., you only need to change log file level to info: property.ROOT_LEVEL=Info property.CONSOLE_LEVEL=Info property.FILE_LEVEL=Info Example 2 Set the console output information to debug level or higher and set the log file output information to info level or higher: property.ROOT_LEVEL=Debug property.CONSOLE_LEVEL=Debug property.FILE_LEVEL=Info Example 3 Change the log file size to 20M appender.file.policies.size.size=20M","title":"Logging"},{"location":"usage/Logging/#log","text":"","title":"Log"},{"location":"usage/Logging/#log-location","text":"Console: From the Console, select \"View\" > \"Output\" and then from the OUTPUT panel, select \"Rocket MV BASIC Language Server\" from the Tasks drop-down. Note : If there is no warning or above level logs generated, then there is no Console output. Log file: .rmv\\logs\\rocket_mv_basic_language_server.log","title":"Log location"},{"location":"usage/Logging/#log-config","text":"Config file location: .rmv\\config\\log4j2.properties The Extension uses the log4j2 component. If you already know log4j2, it will be easy to configure the log. You can find related settings in log4j2 official online documentation here: https://logging.apache.org/log4j/2.x/manual/configuration.html . The following are brief description of commonly used options for your reference.","title":"Log config"},{"location":"usage/Logging/#property","text":"In most cases, you will only need to change these properties: property.ROOT_LEVEL: Used to configure the \"rootLogger.level\". Logger levels include Trace,Debug, Info, Warn, Error, and Fatal. Only logs with levels higher than or equal to the configured level will be available. Root logger level is the first filter. Console or file level is the second filter, only logs that meet both conditions will be printed. Recommended value is \"Info\". property.CONSOLE_LEVEL: Used to configure the \"appender.console.filter.threshold.level\". Limits the log level of output to the console. Recommended value is \"Warn\". property.FILE_LEVEL: Used to configure the \"appender.all.filter.threshold.level\". Limits the log level of output to the file. Recommended value is \"trace\". property.SERVER_NAME: Used to configure the log output file name. We recommend that this value not be changed. Recommended value is \"rocket_mv_basic_language_server\". property.LOG_HOME: Used to configure the log output file home path. Recommended value is \".rmv/logs\".","title":"property"},{"location":"usage/Logging/#global-configuration","text":"status: The level of internal Log4j events that should be logged to the console. We recommend that this value not be changed. Recommended value is \"error\". monitorInterval: The minimum amount of time, in seconds, before the file configuration is checked for changes. Recommended value is \"5\" seconds.","title":"global configuration"},{"location":"usage/Logging/#rootlogger","text":"Set the rootLogger level and where to place the log file. In addition, you can create appender refs for the logger . rootLogger.level: logger level. Recommended value is \"Info\" rootLogger.appenderRef.console.ref: This value is identical to the value of appender.console.name. We recommend that this value not be changed. Recommended value is \"ConsoleAll\". rootLogger.appenderRef.all.ref: This value is identical to the value of appender.file.name. We recommend that this value not be changed. Recommended value is \"RollingFileAll\".","title":"rootLogger"},{"location":"usage/Logging/#appenderconsole","text":"Appender used to define output to the console: appender.console.type: Suggest not to change. Recommended value is \"Console\". appender.console.name: Suggest not to change. Recommended value is \"ConsoleAll\". appender.console.target: SYSTEM_OUT or SYSTEM_ERR, please only use SYSTEM_ERR here. Because SYSTEM_OUT may cause unexpected error. appender.console.layout.type: Includes \"JSONLayout\", \"HTMLLayout\", \"YMLLayout\" and so on. Recommended value is PatternLayout. Recommended value is \"PatternLayout\". appender.console.layout.pattern: output format. Recommended value is \"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\" appender.console.filter.threshold.level: Refer to \"property.CONSOLE_LEVEL\". Suggest not to change, \"${CONSOLE_LEVEL}\". appender.console.filter.threshold.type: Includes \"StringMatchFilter\", \"LevelRangFilter\",\"RegexFilter\" and so on. Recommended value is \"ThresholdFilter\", output log information when log level >= CONSOLE_LEVEL","title":"appender.console"},{"location":"usage/Logging/#appenderfile","text":"Appender used to define output to the file appender.file.type: Suggest not to change. Recommended value is \"RollingFile\". appender.file.name: Suggest not to change. Recommended value is \"RollingFileAll\". appender.file.filter.threshold.level: Refer to \"property.FILE_LEVEL\". Fixed value, \"${FILE_LEVEL}\". appender.file.filter.threshold.type: Refer to \"appender.console.filter.threshold.type\". appender.file.fileName: Log file absolute path. Recommended value is \"${LOG_HOME}/${SERVER_NAME}.log\" appender.file.filePattern: file name format. Don't delete \"%i\" because it is related to \"DefaultRolloverStrategy\" (unless modify \"DefaultRolloverStrategy\" to another strategy). Recommended value is \"${LOG_HOME}/backup/${SERVER_NAME}.%d{yyyy-MM-dd}-%i.log\". appender.file.layout.type: Refer to \"appender.console.layout.type\". appender.file.layout.pattern: output format. Recommended value is \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\". appender.file.policies.type: Specifies a strategy for scrolling logs. Fixed value, \"Policies\". appender.file.policies.time.type: Child of Policies with value fixed to \"TimeBasedTriggeringPolicy\". Time-based rolling strategy. appender.file.policies.time.interval: Recommended value is \"1\". appender.file.policies.time.modulate: Indicates whether to adjust the time interval so that the next rollover occurs at the interval boundary. Recommended value is \"true\". appender.file.policies.size.type: Child of Policies with a fixed value of \"SizeBasedTriggeringPolicy\". The scroll policy based on file size. appender.file.policies.size.size: Policies define the size of each log file. The size can be specified in bytes, suffixed with KB, MB, or GB. Recommended value is \"10M\". appender.file.strategy.type: Suggest not to change, \"DefaultRolloverStrategy\". Used to specify the maximum number of log files that can exist in the same folder before the oldest log files are deleted allowing new log files to be created (via the max attribute). The default is to keep a maximum of seven files in backup file path.","title":"appender.file"},{"location":"usage/Logging/#examples","text":"Example 1 To set the log file level output to info level or higher., you only need to change log file level to info: property.ROOT_LEVEL=Info property.CONSOLE_LEVEL=Info property.FILE_LEVEL=Info Example 2 Set the console output information to debug level or higher and set the log file output information to info level or higher: property.ROOT_LEVEL=Debug property.CONSOLE_LEVEL=Debug property.FILE_LEVEL=Info Example 3 Change the log file size to 20M appender.file.policies.size.size=20M","title":"Examples"},{"location":"usage/MultipleWorkspaceFolders/","text":"Multiple Workspace Folders Support If your source code is located in different account level folders, you can add the folders to the VS Code to view them in one place. Use \"File\" > \"Add Folder to Workspace\" to add a workspace folder. When multiple workspace folders are opened, some functions may operate differently. See the links below for more detail: Configuration Files Group View Connect to U2 Server Compile BASIC Programs","title":"Multiple Workspace Folders"},{"location":"usage/MultipleWorkspaceFolders/#multiple-workspace-folders-support","text":"If your source code is located in different account level folders, you can add the folders to the VS Code to view them in one place. Use \"File\" > \"Add Folder to Workspace\" to add a workspace folder. When multiple workspace folders are opened, some functions may operate differently. See the links below for more detail: Configuration Files Group View Connect to U2 Server Compile BASIC Programs","title":"Multiple Workspace Folders Support"},{"location":"usage/OnlineEditing/","text":"Online Editing Online Editing is an additional method for modifying BASIC program files on the U2 server. With this feature, users can remotely edit BASIC program files on the U2 server instead of having to retrieve or upload files from a repository. However, it is important to note that users cannot simultaneously utilize this mode alongside the traditional editing mode. Note: VS Code version 1.75 or higher is required to use this feature. Only Windows is supported in this preview version. Start Using Before utilizing this feature, it is necessary for the user to create a new empty folder. This folder will be used to hold the project-related files, including cache files and configuration files, that will be created by this extension. Alternatively, users may opt to open an existing folder dedicated to online editing projects. Note: The presence of both the \".rmv\" folder and the \".rmvonline\" folder in the same directory should be avoided, as it may result in unexpected issues. Once the folder is set up, users can initiate the Online Editing functionality by clicking on the Rocket icon located in the left sidebar. There are three scenarios when you click on that icon: If you have already opened a folder that contains a \".rmv\" folder, it indicates that it is an offline project folder. In this case, you will need to open a different folder instead. If you have already opened a folder that contains a \".rmvonline\" folder, it signifies that it is an online editing project folder. You can use this folder for online editing. If you open an empty folder, you can use it for online editing, but you will need to initialize it first. Configure If you open an online editing project folder or have initialized an empty folder, you will be able to view a tree structure in the extension. Using this feature, multiple U2 servers are supported. However, it is important to note that you can only connect to one server at a time. Configure Server There are two methods to access the configuration file: Click the \"Open Config\" button. Right-click on a tree node and select \"Edit Server.\" By accessing the configuration file, you can perform actions such as adding, editing, or deleting U2 server configurations. \"datasource\" : Must be either UNIVERSE or UNIDATA. In the online editing feature, you can only choose one data source. If you change the data source, the extension must be restarted for the change to take affect. \"address\" : Specify the address of the U2 server. \"name\" : Displays a readable name in the tree view. If left empty, the address will be used as the display name. Duplicate names are not supported. \"username\" : The username used for logging into the U2 server. If left empty, you will need to provide it in an input box when connecting to the U2 server. \"password\" : The password used for logging into the U2 server. If left empty, you will need to provide it in an input box when connecting to the U2 server. \"port\" : By default, the port is set to 31438, but you can change this according to your U2 server configuration. \"filterPatterns\" (Optional) : Used to specify filter patterns for Accounts, Folders and Files. There are additional methods available to edit the configuration file: Right-click on a tree view node and select \"Add New Server\" to add a new U2 server configuration. Click on the \"Add New Server\" icon to add a new U2 server configuration. Right-click on a tree view node and select \"Delete Server\" to remove the configuration of the server from the list. After making changes to the configuration file, it is necessary to refresh the tree view for the modifications to take effect. Connection To establish a connection, you can right-click on a U2 server node in the tree view and select \"Connect\". This will initiate the connection to the selected server. Note: When connecting to a U2 server, the extension uses the XDEMO account as default account for UniVerse, and the demo account for UniData. If you wish to disconnect from a U2 server, right-click the corresponding server node in the tree view and select \"Disconnect\". This will terminate the connection to the server. Note: In the online editing feature, the connection icon in the status bar cannot be clicked. This contrasts with the offline mode, where clicking the connection icon allows you to establish or terminate a connection to a server. Filtering Users can establish filters to filter out information which that they user do not want the MVVS to display. Users can configure MVVS to filter out certain file names. This is done to minimize the amount number of unnecessary files listed. In the Configure Patterns option, enter the account/folder/file name patterns you want to match. Separate each pattern with a comma. Pattern matching characters are: * * = any string * ? = any character Steps to Configure Filter Pattern Access Configuration : * Right-click the server name, account, or folder. * Select the \"Configure Pattern\" option. Enter Filter Pattern : * Add your desired filter pattern to the servers.mvbasic.json file. * Save the changes. Refresh Connection : * If you are already connected to the server, manually refresh it to apply the changes. View Filtered Results : * Expand the specific server or folder to see only the filtered accounts, folders, and files. Search BASIC programs Users can search for BASIC programs within a folder. Users can specify a search pattern or text to find specific files. This feature is designed for quick access to files, eliminating the need to scroll through the VS Code file view. In the Search option, enter the file name pattern you want to match. Pattern matching characters are: * * = any string * ? = any character Steps to Search BASIC programs Access Configuration : * Right-click the folder inside Account. * Select the \"Search\" option. Enter Search Pattern : * Enter the file name or search criteria and click Enter. View Search Results : * Users can view search result in \"SEARCH RESULTS\" view and open files directly from that view. Editing BASIC programs Once connected to a U2 server, you can expand the server node to access and view the BASIC program files stored on that server. When you open a program file for editing, the MVVS extension automatically detects the language based on the file extension: Files with a .py extension are recognized as Python . Files with a .json extension are recognized as JSON . BASIC files , however, are not auto-detected and you must manually set the language mode to Rocket MV BASIC . There are three ways to set the language mode for BASIC files: 1. Configure language association in settings.json You can configure VS Code to recognize BASIC files by associating filepaths or names with the Rocket MV BASIC language. To apply the language mode to all files under the BP folder : ```json \"files.associations\": { \" /BP/ \": \"rocket-mvbasic\" } To apply it to a specific file, such as TESTSUM : ```json \"files.associations\": { \"TESTSUM\": \"rocket-mvbasic\" } Full example configuration: : ```json { \"[rocket-mvbasic]\": { \"editor.codeLens\": false }, \"files.associations\": { \" /BP/ \": \"rocket-mvbasic\", \" /.rmv/config/*.json\": \"jsonc\" }, \"files.exclude\": { \" /.git\": true, \" /.svn\": true, \" /.hg\": true, \" /CVS\": true, \" /.DS_Store\": true, \" /Thumbs.db\": true, \" /.rmv/catalog/ \": true, \" /_ \": false } } 2. Use the Command Palette You can manually change the language mode using the VS Code Command Palette: Press Ctrl+Shift+P to open the Command Palette. Type and select \u201cChange Language Mode\u201d. Choose \u201cRocket MV BASIC\u201d from the list of languages. 3. Use the status bar language selector You can also change the language mode via the status bar. At the bottom-right of VS Code, you'll see the current language mode, for example, Plain Text, JSON. Click on the current language mode. A language selection menu displays. Select Rocket MV BASIC from the list. You can also Add or Delete BASIC files: Note: Please note that due to access permissions, certain files may not be displayed in the tree view. Additionally, it's important to be aware that not all folders displayed in the tree view will necessarily contain BASIC program files. This is not configurable. Synchronization Here is the synchronization process when editing a BASIC program file: When opening a BASIC program in the extension online editing mode, the extension will apply a READU lock on the corresponding file on the server side. If the file is already locked on the server side, this request will fail, and an error message will be displayed. Once the file is opened in VS Code, the lock will be released, and a copy will be saved on the VS Code side. When a user saves changes in the extension online editing mode, the extension will attempt to apply a WRITE lock to the file on the server side. If the application of this lock fails, a warning message will be displayed. After successfully applying the WRITE lock to the BASIC file on the server side, the extension will overwrite the corresponding file with the local copy of the BASIC program. All changes made on the server side will be overwritten without warning. Compile and catalog Before using the compilation or catalog functions, a U2 database account must already connected. Quick compile Users can right-click a BASIC program file and select \u201c\u201d to compile a single file. For UniData, there are multiple compilation commands for different flavors. Please refer UD Compilation here Quick catalog Users can right-click a BASIC program file and select \"Catalog\" to catalog a single file for both Universe and Unidata databases Clicking on 'Catalog' will use the parameters from the basic.mvbasic.json file to catalog the file. If you need to change the catalog type, arguments, or initial character, please update the settings in this file. See Catalog Settings in \"basic.mvbasic.json\" file for more information. Compile / Catalog with configuration file The configuration file can help a user to compile and catalog multiple files. Select \u201cConfigure Default Build Task\u2026\u201d from the Terminal menu, and then select \u201cBASIC: Build\u201d to create a build task. A default task file will be generated. For more information on this file, see the \u201cCompile\u201d documentation. Debugging in online mode Refer Debugging for debugging steps. Limitation: Most of the LSP (Language Server Protocol) features are supported, but there are some limitations. Features like Go to Definition, Rename, and Find References may not be able to locate references or definitions in other files. Debugging related functions are currently not supported. Custom documentation features are also not supported now. Please note that only one instance of VS Code can be run at a time. Do not click on another account's folder before completing the cataloging of the current BASIC program. Doing so may result in cataloging the wrong BASIC program on the U2 server side. The parameter \"arguments\" in the basic.mvbasic.json file is currently not supported by the catalog feature. By default, the argument is set to FORCE for both the UV and UD databases.","title":"Online Editing"},{"location":"usage/OnlineEditing/#online-editing","text":"Online Editing is an additional method for modifying BASIC program files on the U2 server. With this feature, users can remotely edit BASIC program files on the U2 server instead of having to retrieve or upload files from a repository. However, it is important to note that users cannot simultaneously utilize this mode alongside the traditional editing mode. Note: VS Code version 1.75 or higher is required to use this feature. Only Windows is supported in this preview version.","title":"Online Editing"},{"location":"usage/OnlineEditing/#start-using","text":"Before utilizing this feature, it is necessary for the user to create a new empty folder. This folder will be used to hold the project-related files, including cache files and configuration files, that will be created by this extension. Alternatively, users may opt to open an existing folder dedicated to online editing projects. Note: The presence of both the \".rmv\" folder and the \".rmvonline\" folder in the same directory should be avoided, as it may result in unexpected issues. Once the folder is set up, users can initiate the Online Editing functionality by clicking on the Rocket icon located in the left sidebar. There are three scenarios when you click on that icon: If you have already opened a folder that contains a \".rmv\" folder, it indicates that it is an offline project folder. In this case, you will need to open a different folder instead. If you have already opened a folder that contains a \".rmvonline\" folder, it signifies that it is an online editing project folder. You can use this folder for online editing. If you open an empty folder, you can use it for online editing, but you will need to initialize it first.","title":"Start Using"},{"location":"usage/OnlineEditing/#configure","text":"If you open an online editing project folder or have initialized an empty folder, you will be able to view a tree structure in the extension. Using this feature, multiple U2 servers are supported. However, it is important to note that you can only connect to one server at a time.","title":"Configure"},{"location":"usage/OnlineEditing/#configure-server","text":"There are two methods to access the configuration file: Click the \"Open Config\" button. Right-click on a tree node and select \"Edit Server.\" By accessing the configuration file, you can perform actions such as adding, editing, or deleting U2 server configurations. \"datasource\" : Must be either UNIVERSE or UNIDATA. In the online editing feature, you can only choose one data source. If you change the data source, the extension must be restarted for the change to take affect. \"address\" : Specify the address of the U2 server. \"name\" : Displays a readable name in the tree view. If left empty, the address will be used as the display name. Duplicate names are not supported. \"username\" : The username used for logging into the U2 server. If left empty, you will need to provide it in an input box when connecting to the U2 server. \"password\" : The password used for logging into the U2 server. If left empty, you will need to provide it in an input box when connecting to the U2 server. \"port\" : By default, the port is set to 31438, but you can change this according to your U2 server configuration. \"filterPatterns\" (Optional) : Used to specify filter patterns for Accounts, Folders and Files. There are additional methods available to edit the configuration file: Right-click on a tree view node and select \"Add New Server\" to add a new U2 server configuration. Click on the \"Add New Server\" icon to add a new U2 server configuration. Right-click on a tree view node and select \"Delete Server\" to remove the configuration of the server from the list. After making changes to the configuration file, it is necessary to refresh the tree view for the modifications to take effect.","title":"Configure Server"},{"location":"usage/OnlineEditing/#connection","text":"To establish a connection, you can right-click on a U2 server node in the tree view and select \"Connect\". This will initiate the connection to the selected server. Note: When connecting to a U2 server, the extension uses the XDEMO account as default account for UniVerse, and the demo account for UniData. If you wish to disconnect from a U2 server, right-click the corresponding server node in the tree view and select \"Disconnect\". This will terminate the connection to the server. Note: In the online editing feature, the connection icon in the status bar cannot be clicked. This contrasts with the offline mode, where clicking the connection icon allows you to establish or terminate a connection to a server.","title":"Connection"},{"location":"usage/OnlineEditing/#filtering","text":"Users can establish filters to filter out information which that they user do not want the MVVS to display. Users can configure MVVS to filter out certain file names. This is done to minimize the amount number of unnecessary files listed. In the Configure Patterns option, enter the account/folder/file name patterns you want to match. Separate each pattern with a comma. Pattern matching characters are: * * = any string * ? = any character","title":"Filtering"},{"location":"usage/OnlineEditing/#steps-to-configure-filter-pattern","text":"Access Configuration : * Right-click the server name, account, or folder. * Select the \"Configure Pattern\" option. Enter Filter Pattern : * Add your desired filter pattern to the servers.mvbasic.json file. * Save the changes. Refresh Connection : * If you are already connected to the server, manually refresh it to apply the changes. View Filtered Results : * Expand the specific server or folder to see only the filtered accounts, folders, and files.","title":"Steps to Configure Filter Pattern"},{"location":"usage/OnlineEditing/#search-basic-programs","text":"Users can search for BASIC programs within a folder. Users can specify a search pattern or text to find specific files. This feature is designed for quick access to files, eliminating the need to scroll through the VS Code file view. In the Search option, enter the file name pattern you want to match. Pattern matching characters are: * * = any string * ? = any character","title":"Search BASIC programs"},{"location":"usage/OnlineEditing/#steps-to-search-basic-programs","text":"Access Configuration : * Right-click the folder inside Account. * Select the \"Search\" option. Enter Search Pattern : * Enter the file name or search criteria and click Enter. View Search Results : * Users can view search result in \"SEARCH RESULTS\" view and open files directly from that view.","title":"Steps to Search BASIC programs"},{"location":"usage/OnlineEditing/#editing-basic-programs","text":"Once connected to a U2 server, you can expand the server node to access and view the BASIC program files stored on that server. When you open a program file for editing, the MVVS extension automatically detects the language based on the file extension: Files with a .py extension are recognized as Python . Files with a .json extension are recognized as JSON . BASIC files , however, are not auto-detected and you must manually set the language mode to Rocket MV BASIC . There are three ways to set the language mode for BASIC files:","title":"Editing BASIC programs"},{"location":"usage/OnlineEditing/#1-configure-language-association-in-settingsjson","text":"You can configure VS Code to recognize BASIC files by associating filepaths or names with the Rocket MV BASIC language. To apply the language mode to all files under the BP folder : ```json \"files.associations\": { \" /BP/ \": \"rocket-mvbasic\" } To apply it to a specific file, such as TESTSUM : ```json \"files.associations\": { \"TESTSUM\": \"rocket-mvbasic\" } Full example configuration: : ```json { \"[rocket-mvbasic]\": { \"editor.codeLens\": false }, \"files.associations\": { \" /BP/ \": \"rocket-mvbasic\", \" /.rmv/config/*.json\": \"jsonc\" }, \"files.exclude\": { \" /.git\": true, \" /.svn\": true, \" /.hg\": true, \" /CVS\": true, \" /.DS_Store\": true, \" /Thumbs.db\": true, \" /.rmv/catalog/ \": true, \" /_ \": false } }","title":"1. Configure language association in settings.json"},{"location":"usage/OnlineEditing/#2-use-the-command-palette","text":"You can manually change the language mode using the VS Code Command Palette: Press Ctrl+Shift+P to open the Command Palette. Type and select \u201cChange Language Mode\u201d. Choose \u201cRocket MV BASIC\u201d from the list of languages.","title":"2. Use the Command Palette"},{"location":"usage/OnlineEditing/#3-use-the-status-bar-language-selector","text":"You can also change the language mode via the status bar. At the bottom-right of VS Code, you'll see the current language mode, for example, Plain Text, JSON. Click on the current language mode. A language selection menu displays. Select Rocket MV BASIC from the list. You can also Add or Delete BASIC files: Note: Please note that due to access permissions, certain files may not be displayed in the tree view. Additionally, it's important to be aware that not all folders displayed in the tree view will necessarily contain BASIC program files. This is not configurable.","title":"3. Use the status bar language selector"},{"location":"usage/OnlineEditing/#synchronization","text":"Here is the synchronization process when editing a BASIC program file: When opening a BASIC program in the extension online editing mode, the extension will apply a READU lock on the corresponding file on the server side. If the file is already locked on the server side, this request will fail, and an error message will be displayed. Once the file is opened in VS Code, the lock will be released, and a copy will be saved on the VS Code side. When a user saves changes in the extension online editing mode, the extension will attempt to apply a WRITE lock to the file on the server side. If the application of this lock fails, a warning message will be displayed. After successfully applying the WRITE lock to the BASIC file on the server side, the extension will overwrite the corresponding file with the local copy of the BASIC program. All changes made on the server side will be overwritten without warning.","title":"Synchronization"},{"location":"usage/OnlineEditing/#compile-and-catalog","text":"Before using the compilation or catalog functions, a U2 database account must already connected.","title":"Compile and catalog"},{"location":"usage/OnlineEditing/#quick-compile","text":"Users can right-click a BASIC program file and select \u201c\u201d to compile a single file. For UniData, there are multiple compilation commands for different flavors. Please refer UD Compilation here","title":"Quick compile"},{"location":"usage/OnlineEditing/#quick-catalog","text":"Users can right-click a BASIC program file and select \"Catalog\" to catalog a single file for both Universe and Unidata databases Clicking on 'Catalog' will use the parameters from the basic.mvbasic.json file to catalog the file. If you need to change the catalog type, arguments, or initial character, please update the settings in this file. See Catalog Settings in \"basic.mvbasic.json\" file for more information.","title":"Quick catalog"},{"location":"usage/OnlineEditing/#compile-catalog-with-configuration-file","text":"The configuration file can help a user to compile and catalog multiple files. Select \u201cConfigure Default Build Task\u2026\u201d from the Terminal menu, and then select \u201cBASIC: Build\u201d to create a build task. A default task file will be generated. For more information on this file, see the \u201cCompile\u201d documentation.","title":"Compile / Catalog with configuration file"},{"location":"usage/OnlineEditing/#debugging-in-online-mode","text":"Refer Debugging for debugging steps.","title":"Debugging in online mode"},{"location":"usage/OnlineEditing/#limitation","text":"Most of the LSP (Language Server Protocol) features are supported, but there are some limitations. Features like Go to Definition, Rename, and Find References may not be able to locate references or definitions in other files. Debugging related functions are currently not supported. Custom documentation features are also not supported now. Please note that only one instance of VS Code can be run at a time. Do not click on another account's folder before completing the cataloging of the current BASIC program. Doing so may result in cataloging the wrong BASIC program on the U2 server side. The parameter \"arguments\" in the basic.mvbasic.json file is currently not supported by the catalog feature. By default, the argument is set to FORCE for both the UV and UD databases.","title":"Limitation:"},{"location":"usage/References/","text":"Using References Open a BASIC program file, right-click a symbol and then select Go to References or Find All References . If you select Go to References and there are multiple references of the symbol, an embedded window opens in current document. If only one reference exists, the cursor will jump to its location. If select Find All References , the results will be listed in a side window.","title":"References"},{"location":"usage/References/#using-references","text":"Open a BASIC program file, right-click a symbol and then select Go to References or Find All References . If you select Go to References and there are multiple references of the symbol, an embedded window opens in current document. If only one reference exists, the cursor will jump to its location. If select Find All References , the results will be listed in a side window.","title":"Using References"},{"location":"usage/Rename/","text":"Rename Usage Open a BASIC program file, and then right-click a symbol and select the Rename Symbol menu option to rename all occurrences of the symbol. Or move the cursor to a symbol then press F2 . Note : only symbols in the currently opened file are impacted. Files referenced in the INCLUDE statement are not impacted.","title":"Using Rename"},{"location":"usage/Rename/#rename-usage","text":"Open a BASIC program file, and then right-click a symbol and select the Rename Symbol menu option to rename all occurrences of the symbol. Or move the cursor to a symbol then press F2 . Note : only symbols in the currently opened file are impacted. Files referenced in the INCLUDE statement are not impacted.","title":"Rename Usage"},{"location":"usage/SemanticHighlighting/","text":"Semantic Highlighting When semantic highlighting is enabled, all symbols are highlighted with different colors based on the syntax. You can enable / disable semantic highlighting in the VS Code settings. Press F1 to open the command window, and then enter \" Open Settings (UI) \". Search \" semantic \" to find the Editor>Semantic Highlighting item . Set the value to true to enable semantic highlighting; otherwise set it to false . Without semantic highlighting: With semantic highlighting: Note : It is suggested that you use Dark+ color theme of the VS Code. Otherwise, the semantic highlighting colors may be stand out visually. Use the following menu items to select VS Code color themes. (This is VS Code\u2019s functionality)","title":"Semantic Highlighting"},{"location":"usage/SemanticHighlighting/#semantic-highlighting","text":"When semantic highlighting is enabled, all symbols are highlighted with different colors based on the syntax. You can enable / disable semantic highlighting in the VS Code settings. Press F1 to open the command window, and then enter \" Open Settings (UI) \". Search \" semantic \" to find the Editor>Semantic Highlighting item . Set the value to true to enable semantic highlighting; otherwise set it to false . Without semantic highlighting: With semantic highlighting: Note : It is suggested that you use Dark+ color theme of the VS Code. Otherwise, the semantic highlighting colors may be stand out visually. Use the following menu items to select VS Code color themes. (This is VS Code\u2019s functionality)","title":"Semantic Highlighting"},{"location":"usage/SignatureHelp/","text":"Signature Help When users call Basic internal or customized functions, the Signature Help feature automatically prompts for the parameters of the function. Users can add the parameter list of the customized function in the corresponding configuration file. Open the customized functions configuration file from the appropriate directory: For UniVerse : .rmv/documentation/universe/custom.json For UniData : .rmv/documentation/unidata/custom.json then add a new function and parameters list. brief : A brief description of this function. See the Customize Documentation for more detail. signature : Parameters list. All parameter names should be listed in one string. When this customized function is called in a BASIC program, the parameters will be prompted automatically.","title":"Signature Help"},{"location":"usage/SignatureHelp/#signature-help","text":"When users call Basic internal or customized functions, the Signature Help feature automatically prompts for the parameters of the function. Users can add the parameter list of the customized function in the corresponding configuration file. Open the customized functions configuration file from the appropriate directory: For UniVerse : .rmv/documentation/universe/custom.json For UniData : .rmv/documentation/unidata/custom.json then add a new function and parameters list. brief : A brief description of this function. See the Customize Documentation for more detail. signature : Parameters list. All parameter names should be listed in one string. When this customized function is called in a BASIC program, the parameters will be prompted automatically.","title":"Signature Help"}]}